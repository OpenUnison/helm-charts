---
apiVersion: openunison.tremolo.io/v1
kind: Application
metadata:
  name: k8s-login-tokens
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison-applications
    app.kubernetes.io/part-of: openunison
  annotations:
    argocd.argoproj.io/sync-wave: "30"
spec:
  azTimeoutMillis: 3000
  isApp: true
  urls:
  - hosts:
    - "#[OU_HOST]"
    filterChain:
    {{ if .Values.dashboard.require_session }}
    - className: com.tremolosecurity.proxy.filters.AzFilter
      params:
        rules:
        - "custom;require-session"
        azFail: "force-logout"
    {{ end }}
    - className: com.tremolosecurity.scalejs.token.ws.ScaleToken
      params:
        displayNameAttribute: "sub"
        frontPage.title: "Kubernetes kubectl command"
        frontPage.text: "Use this kubectl command to set your user in .kubectl/config"
        uidAttributeName: uid
        logoutURL: "/logout"
        homeURL: "/scale/"
        warnMinutesLeft: "5"
        tokenClassName: "com.tremolosecurity.scalejs.KubectlTokenLoader"
        kubectlUsage: "Run the kubectl command to set your user-context and server connection"
        {{ if .Values.enable_impersonation  }}
        {{ if eq .Values.network.ingress_type "istio"}}
        k8sCaCertName: unison-tls
        {{ else }}
        k8sCaCertName: "#[K8S_API_SERVER_CERT:unison-ca]"
        {{ end }}
        {{ else }}
        k8sCaCertName: "#[K8S_API_SERVER_CERT:k8s-master]"
        {{ end }}
        unisonCaCertName: "unison-ca"
        kubectlTemplate: "#[K8S_CLUSTER_NAME:kubernetes]"
        kubectlWinUsage: "#[K8S_URL]"
    uri: /k8slogin/token
    azRules:
    {{ if .Values.openunison.enable_provisioning }}
    {{ if .Values.openunison.naas.groups.external.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }})
      scope: filter
    {{ end }}
    {{ if .Values.openunison.naas.groups.internal.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }})
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.default }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.roles }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ else }}
    {{ $length := len .Values.openunison.az_groups }}
    {{ if eq $length 0 }}
    - scope: dn
      constraint: o=Tremolo
    {{ else }}
    {{ range $az_group := .Values.openunison.az_groups }}
    - scope: filter
      constraint: (groups={{ $az_group }})
    {{ end }}
    {{ end }}
    {{ end }}
    authChain: oauth2jwt-login
  cookieConfig:
    sessionCookieName: tremolosession
    domain: "#[OU_HOST]"
    secure: true
    httpOnly: true
    logoutURI: "/logout"
    keyAlias: session-unison
    timeout: {{ .Values.network.session_inactivity_timeout_seconds }}
    scope: -1
    cookiesEnabled: false
    