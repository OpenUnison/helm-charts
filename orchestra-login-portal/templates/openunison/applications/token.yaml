---
apiVersion: openunison.tremolo.io/v1
kind: Application
metadata:
  name: token
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison-applications
    app.kubernetes.io/part-of: openunison
  annotations:
    argocd.argoproj.io/sync-wave: "30"
spec:
  azTimeoutMillis: 3000
  isApp: true
  urls:
  - hosts:
    - "#[OU_HOST]"
    filterChain: 
    {{ if .Values.dashboard.require_session }}
    - className: com.tremolosecurity.proxy.filters.AzFilter
      params:
        rules:
        - "custom;require-session"
        azFail: "force-logout"
    {{ end }}
    - className: com.tremolosecurity.proxy.filters.XForward
      params:
        createHeaders: "false"
    - className: com.tremolosecurity.proxy.filters.SetNoCacheHeaders
      params: {}
    - className: com.tremolosecurity.proxy.filters.MapUriRoot
      params:
        newRoot: /token
        paramName: tokenURI
    uri: "/k8stoken"
    proxyTo: http://ouhtml-{{ .Release.Name }}.{{ .Release.Namespace }}.svc:8080${tokenURI}
    authChain: login-service
    azRules:
    {{ if .Values.openunison.enable_provisioning }}
    {{ if .Values.openunison.naas.groups.external.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }})
      scope: filter
    {{ end }}
    {{ if .Values.openunison.naas.groups.internal.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }})
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.default }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.roles }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ else }}
    {{ $length := len .Values.openunison.az_groups }}
    {{ if eq $length 0 }}
    - scope: dn
      constraint: o=Tremolo
    {{ else }}
    {{ range $az_group := .Values.openunison.az_groups }}
    - scope: filter
      constraint: (groups={{ $az_group }})
    {{ end }}
    {{ end }}
    {{ end }}
    results:
      azFail: default-login-failure
      auFail: default-login-failure
  - hosts:
    - "#[OU_HOST]"
    filterChain:
    {{ if .Values.dashboard.require_session }}
    - className: com.tremolosecurity.proxy.filters.AzFilter
      params:
        rules:
        - "custom;require-session"
        azFail: "force-logout"
    {{ end }}
    - className: com.tremolosecurity.scalejs.token.ws.ScaleToken
      params:
        displayNameAttribute: "sub"
        frontPage.title: "Kubernetes kubectl command"
        frontPage.text: "Use this kubectl command to set your user in .kubectl/config.  Refresh this screen to generate a new set of tokens.  Logging out will clear all of your sessions."
        uidAttributeName: uid
        logoutURL: "/logout"
        homeURL: "/scale/"
        warnMinutesLeft: "5"
        tokenClassName: "com.tremolosecurity.scalejs.KubectlTokenLoader"
        kubectlUsage: "Run the kubectl command to set your user-context and server connection"
        {{ if .Values.enable_impersonation  }}
        {{ if eq .Values.network.ingress_type "istio"}}
        k8sCaCertName: unison-tls
        {{ else }}
        k8sCaCertName: "#[K8S_API_SERVER_CERT:unison-ca]"
        {{ end }}
        {{ else }}
        k8sCaCertName: "#[K8S_API_SERVER_CERT:k8s-master]"
        {{ end }}
        oulogin: "kubectl oulogin --host=#[OU_HOST]"
        unisonCaCertName: "unison-ca"
        kubectlTemplate: ' export TMP_CERT=\$(mktemp) && echo -e "$k8s_newline_cert$" > \$TMP_CERT && kubectl config set-cluster #[K8S_CLUSTER_NAME:kubernetes] --server=#[K8S_URL] --certificate-authority=\$TMP_CERT --embed-certs=true && kubectl config set-context #[K8S_CLUSTER_NAME:kubernetes] --cluster=#[K8S_CLUSTER_NAME:kubernetes] --user=$user_id$@#[K8S_CLUSTER_NAME:kubernetes]  && kubectl config set-credentials $user_id$@#[K8S_CLUSTER_NAME:kubernetes]  --auth-provider=oidc --auth-provider-arg=client-secret= --auth-provider-arg=idp-issuer-url=$token.claims.issuer$ --auth-provider-arg=client-id=$token.trustName$ --auth-provider-arg=refresh-token=$token.refreshToken$  --auth-provider-arg=id-token=$token.encodedIdJSON$  --auth-provider-arg=idp-certificate-authority-data=#[IDP_CERT_DATA:$ou_b64_cert$]   && kubectl config use-context #[K8S_CLUSTER_NAME:kubernetes] && rm \$TMP_CERT'
        kubectlWinUsage: >
          \$TMP_CERT=New-TemporaryFile ; "$k8s_newline_cert_win$" | out-file \$TMP_CERT -encoding oem ; kubectl config set-cluster #[K8S_CLUSTER_NAME:kubernetes] --server=#[K8S_URL]  --certificate-authority=\$TMP_CERT --embed-certs=true ; kubectl config set-context #[K8S_CLUSTER_NAME:kubernetes] --cluster=#[K8S_CLUSTER_NAME:kubernetes] --user=$user_id$@#[K8S_CLUSTER_NAME:kubernetes]  ; kubectl config set-credentials $user_id$@#[K8S_CLUSTER_NAME:kubernetes]  --auth-provider=oidc --auth-provider-arg=client-secret= --auth-provider-arg=idp-issuer-url=$token.claims.issuer$ --auth-provider-arg=client-id=$token.trustName$ --auth-provider-arg=refresh-token=$token.refreshToken$  --auth-provider-arg=id-token=$token.encodedIdJSON$  --auth-provider-arg=idp-certificate-authority-data=$ou_b64_cert$ ; kubectl config use-context #[K8S_CLUSTER_NAME:kubernetes] ; Remove-Item -recurse -force \$TMP_CERT
    uri: /k8stoken/token
    azRules:
    {{ if .Values.openunison.enable_provisioning }}
    {{ if .Values.openunison.naas.groups.external.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }})
      scope: filter
    {{ end }}
    {{ if .Values.openunison.naas.groups.internal.enabled }}
    - constraint: (groups=k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }})
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.default }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ range $role := .Values.openunison.naas.groups.roles }}
    - constraint: (groups=k8s-namespace-{{ $role.name }}-k8s-*)
      scope: filter
    {{ end }}
    {{ else }}
    {{ $length := len .Values.openunison.az_groups }}
    {{ if eq $length 0 }}
    - scope: dn
      constraint: o=Tremolo
    {{ else }}
    {{ range $az_group := .Values.openunison.az_groups }}
    - scope: filter
      constraint: (groups={{ $az_group }})
    {{ end }}
    {{ end }}
    {{ end }}
    authChain: login-service
    results:
      azFail: default-login-failure
      auFail: default-login-failure
  cookieConfig:
    sessionCookieName: tremolosession
    domain: "#[OU_HOST]"
    secure: true
    httpOnly: true
    logoutURI: "/logout"
    keyAlias: session-unison
    timeout: {{ .Values.network.session_inactivity_timeout_seconds }}
    scope: -1
    cookiesEnabled: true
    