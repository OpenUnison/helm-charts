{{ if .Values.openunison.naas.groups.internal.enabled }}
{{ if not .Values.openunison.naas.groups.external.enabled }}
---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: jitdb
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison-workflows
    app.kubernetes.io/part-of: openunison
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  description: JIT
  inList: false
  label: JIT
  orgId: 687da09f-8ec1-48ac-b035-f2f182b9bd1e
  dynamicConfiguration:
    dynamic: false
    className: ""
    params: []
  tasks: |-
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.LoadGroups
             params:
               nameAttr: uid
           
           - taskType: mapping
             strict: true
             map:
             - targetAttributeName: TREMOLO_USER_ID
               sourceType: user
               targetAttributeSource: uid
             - targetAttributeName: sub
               sourceType: user
               targetAttributeSource: uid
             - targetAttributeName: mail
               sourceType: user
               targetAttributeSource: mail
             - targetAttributeName: firstName
               sourceType: user
               targetAttributeSource: givenName
             - targetAttributeName: lastName
               sourceType: user
               targetAttributeSource: sn
             onSuccess:
               #  - taskType: customTask
               #    className: com.tremolosecurity.provisioning.customTasks.PrintUserInfo
               #    params:
               #      message: in-mapping
               - taskType: addGroup
                 name: users
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
                 params:
                   javaScript: |-
                     // This task adds the administrators group to the first user
                     // to login
                     
                     function init(task,params) {
                       // nothing to do
                     }

                     function reInit(task) {
                       // do nothing
                     }

                     function doTask(user,request) {
                       HashMap = Java.type("java.util.HashMap");
                       System = Java.type("java.lang.System");
                       sql = task.getConfigManager().getProvisioningEngine().getTarget("jitdb").getProvider().getDS().getConnection();
                       k8s = task.getConfigManager().getProvisioningEngine().getTarget("k8s").getProvider();
                       request.put("WORKFLOW",task.getWorkflow());
                       
                        // setup internal groups
                        {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
                        
                        if (! k8s.isGroupExists("administrators{{ .Values.openunison.naas.groups.internal.suffix }}",user,request)) {
                          additionalAttribs = new HashMap();
                          k8s.addGroup("administrators{{ .Values.openunison.naas.groups.internal.suffix }}",additionalAttribs,user,request);
                        }

                        
                        if (! k8s.isGroupExists("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}",user,request)) {
                          additionalAttribs = new HashMap();
                          k8s.addGroup("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}",additionalAttribs,user,request);
                        }

                        if (! k8s.isGroupExists("users",user,request)) {
                          additionalAttribs = new HashMap();
                          k8s.addGroup("users",additionalAttribs,user,request);
                        }
                        {{ end }}

                       try {
                         rs = sql.createStatement().executeQuery("SELECT COUNT(*) AS num FROM localUsers");
                         rs.next();
                         if (rs.getInt("num") == 1) {
                           
                           // first user, add the admin group
                           user.getGroups().add("administrators{{ .Values.openunison.naas.groups.internal.suffix }}");
                           user.getGroups().add("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}");
                         }
                       } finally {
                         sql.close();
                       }

                       return true;
                     }

               {{ if gt (float64 .Values.openunison.jit_grace_period) 0.0 }}
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.customTasks.AddTimestampToUser
                 params:
                   attributeName: lastUpdated
               {{ end }}
               
               - taskType: provision
                 sync: true
                 target: jitdb
                 setPassword: false
                 onlyPassedInAttributes: true
                 attributes:
                 - sub
                 - mail
                 - firstName
                 - lastName
                 {{ if gt (float64 .Values.openunison.jit_grace_period) 0.0 }}
                 - lastUpdated
                 {{ end }}
               {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
               - taskType: provision
                 sync: true
                 target: k8s
                 setPassword: false
                 onlyPassedInAttributes: true
                 attributes:
                 - sub
               {{ end }}
               - taskType: resync
                 keepExternalAttrs: false
                 changeRoot: true
                 newRoot: o=Tremolo
{{ end }}
{{ end }}