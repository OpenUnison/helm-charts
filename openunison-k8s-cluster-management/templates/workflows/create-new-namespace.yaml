{{- $root := . -}}
---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: create-new-namespace
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  description: functional workflow for creating namespaces
  inList: false
  label: Create New Namespace
  orgId: 04901973-5f4c-46d9-9e22-55e88e168776
  tasks: |-
           {{ if .Values.openunison.naas.workflows.new_namespace.pre_run_workflow }}
           - taskType: callWorkflow
             name: {{ .Values.openunison.naas.workflows.new_namespace.pre_run_workflow }}
           {{ end }}

           - taskType: customTask
             className: com.tremolosecurity.provisioning.tasks.CheckForGit
             params: {}


           
             
             
           {{ if .Values.openunison.naas.groups.internal.enabled }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
             params:
               target: jitdb
               name: approvers-k8s-$cluster$-$nameSpace$
               attributes:
               - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
               - unison.group.create.param.2=Approve access to $cluster$ $nameSpace$
             
           {{ range $role := .Values.openunison.naas.groups.default }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
             params:
               target: jitdb
               name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.internal.suffix }}
               attributes:
               - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
               - unison.group.create.param.2={{ $role.description }}
           {{ end }}
           {{ range $role := .Values.openunison.naas.groups.roles }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
             params:
               target: jitdb
               name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.internal.suffix }}
               attributes:
               - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
               - unison.group.create.param.2={{ $role.description }}
           {{ end }}
            
            
            
           {{ end }}

           {{ if .Values.openunison.naas.groups.external.enabled }}

           {{ range $role := .Values.openunison.naas.groups.default }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
             params:
               javaScript: |-
                 Attribute = Java.type("com.tremolosecurity.saml.Attribute");

                 function init(task,params) {
                   // nothing to do
                 }
 
                 function reInit(task) {
                   // do nothing
                 }
 
                 function doTask(user,request) {
                   if (! user.getAttribs().get("{{ $role.external.fieldName }}")) {
                     user.getAttribs().put("{{$role.external.fieldName}}",new Attribute("{{$role.external.fieldName}}",""));
                   }
                   
                   return true;
                 }

           - taskType: ifAttrHasValue
             name: {{ $role.external.fieldName }}
             value: ""
             onFailure:
              - taskType: customTask
                className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
                params:
                  target: jitdb
                  name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                  attributes:
                  - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
                  - unison.group.create.param.2={{ $role.description }}

              # create group mapping
              - taskType: customTask
                className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
                params:
                  targetName: k8s
                  template: |-
                      kind: GroupMetaData
                      apiVersion: openunison.tremolo.io/v1
                      metadata:
                        name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$
                        namespace: {{ $root.Release.Namespace }}
                        labels:
                          name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$
                          app.kubernetes.io/name: openunison
                          app.kubernetes.io/instance: openunison-{{ $root.Release.Name }}
                          app.kubernetes.io/component: openunison-groupmetadata
                          app.kubernetes.io/part-of: openunison
                        annotations:
                          tremolo.io/managedByGit: "$useGit$"
                      spec:
                        groupName: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                        externalName: "${{ $role.external.fieldName }}$"
                  kind: GroupMetaData
                  srcType: yaml
                  writeToRequest: "$useGit$"
                  requestAttribute: git-secret-cluster-k8s-$nameSpace$
                  path: {{ $root.Values.openunison.naas.git.prefix }}/{{ $root.Release.Namespace }}/groupmetadatas/k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$.yaml
           {{ end }}
           {{ range $role := .Values.openunison.naas.groups.roles }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
             params:
               javaScript: |-
                 Attribute = Java.type("com.tremolosecurity.saml.Attribute");

                 function init(task,params) {
                   // nothing to do
                 }
 
                 function reInit(task) {
                   // do nothing
                 }
 
                 function doTask(user,request) {
                   if (! user.getAttribs().get("{{ $role.external.fieldName }}")) {
                     user.getAttribs().put("{{$role.external.fieldName}}",new Attribute("{{$role.external.fieldName}}",""));
                   }
                   
                   return true;
                 }
           
           - taskType: ifAttrHasValue
             name: {{ $role.external.fieldName }}
             value: ""
             onFailure:
              - taskType: customTask
                className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
                params:
                  target: jitdb
                  name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                  attributes:
                  - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
                  - unison.group.create.param.2={{ $role.description }}

              # create group mapping
              - taskType: customTask
                className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
                params:
                  targetName: k8s
                  template: |-
                      kind: GroupMetaData
                      apiVersion: openunison.tremolo.io/v1
                      metadata:
                        name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$
                        namespace: {{ $root.Release.Namespace }}
                        labels:
                          name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$
                          app.kubernetes.io/name: openunison
                          app.kubernetes.io/instance: openunison-{{ $root.Release.Name }}
                          app.kubernetes.io/component: openunison-groupmetadata
                          app.kubernetes.io/part-of: openunison
                        annotations:
                          tremolo.io/managedByGit: "$useGit$"
                      spec:
                        groupName: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                        externalName: "${{ $role.external.fieldName }}$"
                  kind: GroupMetaData
                  srcType: yaml
                  writeToRequest: "$useGit$"
                  requestAttribute: git-secret-cluster-k8s-$nameSpace$
                  path: {{ $root.Values.openunison.naas.git.prefix }}/{{ $root.Release.Namespace }}/groupmetadatas/k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace$.yaml
           {{ end }}

            
           {{ end }}


                 
           - taskType: mapping
             strict: true
             map:
               - targetAttributeName: uid
                 targetAttributeSource: uid
                 sourceType: user
             onSuccess:
               {{ if .Values.openunison.naas.groups.internal.enabled }}
               - taskType: addGroup
                 name: approvers-k8s-$cluster$-$nameSpace$
                 remove: false
               - taskType: addGroup
                 name: k8s-namespace-administrators-$cluster$-$nameSpace${{ .Values.openunison.naas.groups.internal.suffix }}
                 remove: false
               - taskType: provision
                 sync: false
                 target: jitdb
                 setPassword: false
                 onlyPassedInAttributes: false
                 attributes: ["uid"]
              {{ end }}

           {{ if .Values.openunison.naas.workflows.new_namespace.pre_provision_workflow }}
           - taskType: callWorkflow
             name: {{ .Values.openunison.naas.workflows.new_namespace.pre_provision_workflow }}
           {{ end }}

           # GitOps - Create SSH Key for Namespace
           - taskType: ifAttrHasValue
             name: useGit
             value: "true"
             onSuccess:
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
                 params:
                   targetName: k8s
                   template: |-
                     kind: Secret
                     apiVersion: v1
                     metadata:
                       name: sshkey-namespace-$cluster$-$nameSpace$
                       namespace: openunison
                       labels:
                         cluster: $cluster$
                     data:
                       id_rsa: $b64sshkey$
                     type: Opaque
                   srcType: yaml
                   writeToRequest: "false"

           - taskType: customTask
             className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
             params:
               targetName: $cluster$
               template: |-
                  kind: Namespace
                  apiVersion: v1
                  metadata:
                    name: "$nameSpace$"
                    labels:
                      name: "$nameSpace$"
                      tremolo.io/request-access: $enableInternal$
                      {{ range $key,$value := .Values.openunison.naas.workflows.new_namespace.namespace_request_labels }}
                      {{ $key }}: "${{ $value }}$"
                      {{ end }}
                    annotations:
                      tremolo.io/managedByGit: "$useGit$"
                      $gitUrlAnnotation$
               kind: Namespace
               srcType: yaml
               writeToRequest: "$useGit$"
               requestAttribute: git-secret-cluster-$cluster$-$nameSpace$
               path: {{ $root.Values.openunison.naas.git.prefix }}/namespaces/$nameSpace$.yaml

           {{ if .Values.openunison.naas.workflows.new_namespace.post_namespace_create_workflow }}
           - taskType: callWorkflow
             name: {{ .Values.openunison.naas.workflows.new_namespace.post_namespace_create_workflow }}
           {{ end }}

           {{ if .Values.openunison.naas.groups.internal.enabled }}

           {{ range $role := .Values.openunison.naas.groups.default }}
           {{ range $bind := $role.bindings }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
             params:
               targetName: $cluster$
               template: |-
                    kind: RoleBinding
                    apiVersion: rbac.authorization.k8s.io/v1
                    metadata:
                      name: {{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.internal.suffix }}
                      namespace: "$nameSpace$"
                    subjects:
                    - kind: Group
                      name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.internal.suffix }}
                      apiGroup: rbac.authorization.k8s.io
                    roleRef:
                      kind: {{ $bind.type }}
                      name: {{ $bind.name }}
                      apiGroup: rbac.authorization.k8s.io
               kind: RoleBinding
               srcType: yaml
               writeToRequest: "$useGit$"
               requestAttribute: git-secret-namespace-$cluster$-$nameSpace$
               path: $gitPath$/$nameSpace$/rolebindings/{{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.internal.suffix }}.yaml
           {{ end }}
           {{ end }}
           {{ range $role := .Values.openunison.naas.groups.roles }}
           {{ range $bind := $role.bindings }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
             params:
               targetName: $cluster$
               template: |-
                    kind: RoleBinding
                    apiVersion: rbac.authorization.k8s.io/v1
                    metadata:
                      name: {{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.internal.suffix }}
                      namespace: "$nameSpace$"
                    subjects:
                    - kind: Group
                      name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.internal.suffix }}
                      apiGroup: rbac.authorization.k8s.io
                    roleRef:
                      kind: {{ $bind.type }}
                      name: {{ $bind.name }}
                      apiGroup: rbac.authorization.k8s.io
               srcType: yaml
               writeToRequest: "$useGit$"
               requestAttribute: git-secret-namespace-$cluster$-$nameSpace$
               path: $gitPath$/$nameSpace$/rolebindings/{{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.internal.suffix }}.yaml
           {{ end }}
           {{ end }}
           {{ end }}

           {{ if .Values.openunison.naas.groups.external.enabled }}

           {{ range $role := .Values.openunison.naas.groups.default }}
           {{ range $bind := $role.bindings }}
           - taskType: ifAttrHasValue
             name: {{ $role.external.fieldName }}
             value: ""
             onFailure:
              - taskType: customTask
                className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
                params:
                  targetName: $cluster$
                  template: |-
                        kind: RoleBinding
                        apiVersion: rbac.authorization.k8s.io/v1
                        metadata:
                          name: {{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.external.suffix }}
                          namespace: "$nameSpace$"
                        subjects:
                        - kind: Group
                          name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                          apiGroup: rbac.authorization.k8s.io
                        roleRef:
                          kind: {{ $bind.type }}
                          name: {{ $bind.name }}
                          apiGroup: rbac.authorization.k8s.io
                  srcType: yaml
                  writeToRequest: "$useGit$"
                  requestAttribute: git-secret-namespace-$cluster$-$nameSpace$
                  path: $gitPath$/$nameSpace$/rolebindings/{{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.external.suffix }}.yaml
           {{ end }}
           {{ end }}
           {{ range $role := .Values.openunison.naas.groups.roles }}
           {{ range $bind := $role.bindings }}
           - taskType: ifAttrHasValue
             name: {{ $role.external.fieldName }}
             value: ""
             onFailure:
              - taskType: customTask
                className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
                params:
                  targetName: $cluster$
                  template: |-
                        kind: RoleBinding
                        apiVersion: rbac.authorization.k8s.io/v1
                        metadata:
                          name: {{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.external.suffix }}
                          namespace: "$nameSpace$"
                        subjects:
                        - kind: Group
                          name: k8s-namespace-{{ $role.name }}-$cluster$-$nameSpace${{ $root.Values.openunison.naas.groups.external.suffix }}
                          apiGroup: rbac.authorization.k8s.io
                        roleRef:
                          kind: {{ $bind.type }}
                          name: {{ $bind.name }}
                          apiGroup: rbac.authorization.k8s.io
                  srcType: yaml
                  writeToRequest: "$useGit$"
                  requestAttribute: git-secret-namespace-$cluster$-$nameSpace$
                  path: $gitPath$/$nameSpace$/rolebindings/{{ $bind.binding }}-binding{{ $root.Values.openunison.naas.groups.external.suffix }}.yaml
           {{ end }}
           {{ end }}
           {{ end }}


           - taskType: ifAttrHasValue
             name: useGit
             value: "true"
             onSuccess:
               # GitOps - Run Job to push to cluster repo
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.tasks.PushToGit
                 params:
                   secretName: sshkey-cluster-$cluster$
                   nameSpace: openunison
                   target: k8s
                   keyName: id_rsa
                   gitRepo: $clusterGitUrl$
                   requestObject: git-secret-cluster-k8s-$nameSpace$
                   commitMsg: For workflow $WORKFLOW.id$

               # GitOps - Run Job to push to namespace repo
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.tasks.PushToGit
                 params:
                   secretName: sshkey-namespace-$cluster$-$nameSpace$
                   nameSpace: openunison
                   target: k8s
                   keyName: id_rsa
                   gitRepo: $namespaceGitUrl$
                   requestObject: git-secret-namespace-$cluster$-$nameSpace$
                   commitMsg: For workflow $WORKFLOW.id$

               

           - taskType: notifyUser
             subject: {{ .Values.openunison.naas.workflows.new_namespace.notification.subject }}
             mailAttrib: mail
             msg: |-
{{ .Values.openunison.naas.workflows.new_namespace.notification.msg | indent 17 }}