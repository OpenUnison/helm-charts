{{ if .Values.openunison.naas.enable_security_org  }}
---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: end-sessions
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  description: Ends all oidc and web sessions across the deployment
  inList: true
  label: End sessions
  orgId: 91c584e2-d965-4228-99a2-e774b1d6d871
  tasks: |-
    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.LoadGroupsFromTarget
      params:
        target: jitdb
        nameAttr: uid

    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
      params: 
          javaScript: |-
            DigestUtils = Java.type("org.apache.commons.codec.digest.DigestUtils");
            FilterBuilder = Java.type("org.apache.directory.ldap.client.api.search.FilterBuilder");
            GlobalEntries = Java.type("com.tremolosecurity.server.GlobalEntries");
            ArrayList = Java.type("java.util.ArrayList");
            Attribute = Java.type("com.tremolosecurity.saml.Attribute");
            JString = Java.type("java.lang.String");
            System = Java.type("java.lang.System");
            Gson = Java.type("com.google.gson.Gson");
            JSUtils = Java.type("com.tremolosecurity.util.JSUtils");
            Base64 = Java.type("java.util.Base64");
            UUID = Java.type("java.util.UUID");
            DateTime = Java.type("org.joda.time.DateTime");
            DateTimeZone = Java.type("org.joda.time.DateTimeZone");
            Logger = Java.type("org.apache.log4j.Logger");
            String = Java.type("java.lang.String");
            OpenShiftTarget = Java.type("com.tremolosecurity.unison.openshiftv3.OpenShiftTarget");
            PortalGroupMapper = Java.type("com.tremolosecurity.k8s.util.PortalGroupMapper");
            HashMap = Java.type("java.util.HashMap");
            TremoloUser = Java.type("com.tremolosecurity.provisioning.service.util.TremoloUser");
            WFCall = Java.type("com.tremolosecurity.provisioning.service.util.WFCall");
            ServiceActions = Java.type("com.tremolosecurity.provisioning.service.util.ServiceActions");
            HashSet = Java.type("java.util.HashSet");
            ProvisioningParams = Java.type("com.tremolosecurity.provisioning.core.ProvisioningParams");


            function init(task,params) {
                state.put("workflow_obj",task.getWorkflow());
              }

              function reInit(task) {
                state.put("workflow_obj",task.getWorkflow());
              }

              function doTask(user,request) {
                var workflow = state.get("workflow_obj");

                var clusterAz = new HashMap();
                PortalGroupMapper.getInstance().generateMappings(user.getGroups(),clusterAz);
                
                // generate local user dn and sha1
                var searchFilter = FilterBuilder.equal('uid', user.getUserID()).toString();
                res = GlobalEntries.getGlobalEntries().getConfigManager().getMyVD().search('o=Tremolo', 2, searchFilter, new ArrayList());
                res.hasMore();
                var fromLdap = res.next();
                var dn = fromLdap.getDN();

                var satDn = "uid=" + OpenShiftTarget.sub2uid(user.getUserID()) + ",ou=shadow,o=Tremolo";

                request.put("delete_name",UUID.randomUUID().toString());
                request.put("user_cp_dn",dn);
                request.put("user_cp_dn_hash",DigestUtils.sha1Hex(dn));
                request.put("user_sat_dn",satDn);
                request.put("user_sat_dn_hash",DigestUtils.sha1Hex(dn));

                // for each authorized cluster, create an asynchronous workflow instance that will
                // clear the oidc-sessions and create the EndSession on the remote cluster
                clusterAz.keySet().forEach(clusterName => {
                    if (clusterName != "N/A" && clusterName != "#[K8S_DEPLOYMENT_NAME:Local Deployment]") {
                        System.out.println("$$$$$$ " + clusterName );


                        var nuser = new TremoloUser();

                    
                        nuser.setUid(workflow.getRequester().getUserID());
                        nuser.getAttributes().add(new Attribute("sub",workflow.getRequester().getUserID()));
                        nuser.getAttributes().add(new Attribute("uid",workflow.getRequester().getUserID()));

                        
                        

                        attributes = new HashSet();
                        attributes.add("sub");
                        attributes.add("uid");

                        call = new WFCall();
                        call.setReason("deleting oidc sessions and web sessions for workflow " + workflow.getId());
                        call.setUidAttributeName("sub");
                        call.setUser(nuser);
                        call.setRequestor(nuser.getUid());

                        call.getRequestParams().put(ProvisioningParams.UNISON_EXEC_TYPE, ProvisioningParams.UNISON_EXEC_ASYNC);
                        
                        call.getRequestParams().put("clusterName",clusterName);
                        call.getRequestParams().put("user_sat_dn",satDn);
                        call.getRequestParams().put("user_sat_dn_hash",DigestUtils.sha1Hex(satDn));
                        call.getRequestParams().put("delete_name",UUID.randomUUID().toString());


                        
                        wf = GlobalEntries.getGlobalEntries().getConfigManager().getProvisioningEngine().getWorkFlow("end-remote-cluster-sessions");
                        wf.executeWorkflow(call);


                    }
                    
                });

                return true;
              }

    # Delete the oidc-sessions in the control plane
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.DeleteK8sObject
      params:
            targetName: k8s
            kind:  OidcSession
            url: /apis/openunison.tremolo.io/v1/namespaces/{{ .Release.Namespace }}/oidc-sessions?labelSelector=tremolo.io%2Fuser-dn%3D$user_cp_dn_hash$


    {{ if .Values.openunison.enable_end_session}}

    # create an EndSession object
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
      params:
        targetName: k8s
        template: |-
            kind: EndSession
            apiVersion: openunison.tremolo.io/v1
            metadata:
              name: x$delete_name$x
              namespace: {{ .Release.Namespace }}
            spec:
              dn: $user_cp_dn$
        
        srcType: yaml

    {{ end }}
{{ end }}