{{ if .Values.openunison.naas.groups.external.enabled }}
---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: jitdb
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison-workflows
    app.kubernetes.io/part-of: openunison
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  description: JIT
  inList: false
  label: JIT
  orgId: 687da09f-8ec1-48ac-b035-f2f182b9bd1e
  dynamicConfiguration:
    dynamic: false
    className: ""
    params: []
  tasks: |-
           

           - taskType: ifAttrExists
             name: githubTeams
             onSuccess:
             - taskType: customTask
               className: com.tremolosecurity.unison.proxy.auth.github.MergeGithubGroups
               params: {}

           {{ if .Values.openunison.naas.groups.internal.enabled }}
           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.LoadGroups
             params:
               nameAttr: uid
               inverse: "false"
           {{ end }}

           - taskType: customTask
             className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
             params:
               javaScript: |-
                 // Maps external groups to local groups
                 System = Java.type("java.lang.System");
                 DN = Java.type("com.novell.ldap.util.DN");
                 Attribute = Java.type("com.tremolosecurity.saml.Attribute");
                 ArrayList = Java.type("java.util.ArrayList");
                 SetupGroupMetadataWatch = Java.type("com.tremolosecurity.proxy.filters.SetupGroupMetadataWatch");
                 HashMap = Java.type("java.util.HashMap");

                 function init(task,params) {
                   // nothing to do
                 }
 
                 function reInit(task) {
                   // do nothing
                 }
 
                 function doTask(user,request) {
                   {{ if .Values.openunison.naas.groups.internal.enabled }}
                   var hasInternal = true;
                   {{ else }}
                   var hasInternal = false;
                   {{ end }}
                   
                   k8s = task.getConfigManager().getProvisioningEngine().getTarget("k8s").getProvider();
                   request.put("WORKFLOW",task.getWorkflow());

                   {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
                  {{ if .Values.openunison.naas.groups.internal.enabled }}
                  if (! k8s.isGroupExists("administrators{{ .Values.openunison.naas.groups.internal.suffix }}",user,request)) {
                    additionalAttribs = new HashMap();
                    k8s.addGroup("administrators{{ .Values.openunison.naas.groups.internal.suffix }}",additionalAttribs,user,request);
                  }

                  
                  if (! k8s.isGroupExists("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}",user,request)) {
                    additionalAttribs = new HashMap();
                    k8s.addGroup("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}",additionalAttribs,user,request);
                  }
                  {{ end }}

                  if (! k8s.isGroupExists("administrators{{ .Values.openunison.naas.groups.external.suffix }}",user,request)) {
                    additionalAttribs = new HashMap();
                    k8s.addGroup("administrators{{ .Values.openunison.naas.groups.external.suffix }}",additionalAttribs,user,request);
                  }

                  
                  if (! k8s.isGroupExists("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}",user,request)) {
                    additionalAttribs = new HashMap();
                    k8s.addGroup("k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}",additionalAttribs,user,request);
                  }

                  if (! k8s.isGroupExists("users",user,request)) {
                    additionalAttribs = new HashMap();
                    k8s.addGroup("users",additionalAttribs,user,request);
                  }
                  {{ end }}
                   
                   var internalGroups = new ArrayList();

                   if (hasInternal) {

                     // need to load all internal groups
                     var knownInternalGroups = new Set();
                     sql = task.getConfigManager().getProvisioningEngine().getTarget("jitdb").getProvider().getDS().getConnection();
                     try {
                       rs = sql.createStatement().executeQuery("select name from localGroups where name like '%{{ .Values.openunison.naas.groups.internal.suffix }}' OR name like 'approvers-%'");
                       while (rs.next()) {
                        knownInternalGroups.add(rs.getString("name"));
                       }
                     } finally {
                       sql.close();
                     }
                     for (var i=0;i<user.getGroups().size();i++) {
                       var groupName = user.getGroups().get(i);
                       if ((groupName.endsWith("{{ .Values.openunison.naas.groups.internal.suffix }}") || groupName.startsWith("approvers-")) && knownInternalGroups.has(groupName)) {
                         internalGroups.add(groupName);
                       }
                     }
                   }


                   
                   user.getGroups().clear();
                   
                   user.getGroups().addAll(internalGroups);
                   


                   jitDb = task.getConfigManager().getProvisioningEngine().getTarget("jitdb").getProvider();
                   k8s = task.getConfigManager().getProvisioningEngine().getTarget("k8s").getProvider();
                   
                   if (user.getAttribs().get("githubTeams") != null) {
                    memberOf = user.getAttribs().get("githubTeams"); 
                   } else {
                    memberOf = user.getAttribs().get("memberOf");
                  }
                   
                   request.put("WORKFLOW",task.getWorkflow());
                   if (memberOf != null) {
                    for (var i=0;i<memberOf.getValues().size();i++) {
                      k8sGroup = SetupGroupMetadataWatch.getK8s(memberOf.getValues().get(i));
                      
                      
                      if (k8sGroup != null) {
                      
                        for (var j=0;j<k8sGroup.size();j++) {
                          var k8sGroupName = k8sGroup.get(j);
                          if (! jitDb.isGroupExists(k8sGroupName,user,request)) {
                            additionalAttribs = new HashMap();
                            additionalAttribs.put("unison.group.create.sql","INSERT INTO localGroups (name,description) VALUES (?,?)");
                            additionalAttribs.put("unison.group.create.param.2","External Group");


                            jitDb.addGroup(k8sGroupName,additionalAttribs,user,request);
                          }

                          {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
                          if (! k8s.isGroupExists(k8sGroupName,user,request)) {
                            additionalAttribs = new HashMap();
                            k8s.addGroup(k8sGroupName,additionalAttribs,user,request);
                          }
                          {{ end }}

                          user.getGroups().add(k8sGroupName);
                        }
                      }
                    }
                  }
                   
                   return true;
                 }  
           
           - taskType: mapping
             strict: true
             map:
             - targetAttributeName: TREMOLO_USER_ID
               sourceType: user
               targetAttributeSource: uid
             - targetAttributeName: sub
               sourceType: user
               targetAttributeSource: uid
             - targetAttributeName: mail
               sourceType: user
               targetAttributeSource: mail
             - targetAttributeName: firstName
               sourceType: user
               targetAttributeSource: givenName
             - targetAttributeName: lastName
               sourceType: user
               targetAttributeSource: sn
             onSuccess:
               - taskType: customTask
                 className: com.tremolosecurity.provisioning.customTasks.PrintUserInfo
                 params:
                   message: in-mapping
               - taskType: addGroup
                 name: users

               - taskType: provision
                 sync: true
                 target: jitdb
                 setPassword: false
                 onlyPassedInAttributes: true
                 attributes:
                 - sub
                 - mail
                 - firstName
                 - lastName
               {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
               - taskType: provision
                 sync: true
                 target: k8s
                 setPassword: false
                 onlyPassedInAttributes: true
                 attributes:
                 - sub
               {{ end }}
               - taskType: resync
                 keepExternalAttrs: false
                 changeRoot: true
                 newRoot: o=Tremolo
{{ end }}