apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-oidc-proxy-{{ .Release.Name }}
    app.kubernetes.io/name: cicd-proxy
    app.kubernetes.io/instance: cicd-proxy-{{ .Release.Name }}
    app.kubernetes.io/component: kube-oidc-proxy
    app.kubernetes.io/part-of: cicd-proxy
  name: kube-oidc-proxy-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  {{ if eq .Values.cicd_proxy.network.ingress_type "traefik" }}
  {{ if .Values.cicd_proxy.network.traefik.secure }} 
  annotations:
    argocd.argoproj.io/sync-wave: "40"
    traefik.ingress.kubernetes.io/service.serversscheme: https
  {{ else }}
  annotations:
    argocd.argoproj.io/sync-wave: "40"
  {{ end }}
  {{ else }}
  annotations:
    argocd.argoproj.io/sync-wave: "40"
  {{ end }}
spec:
  replicas: {{ .Values.cicd_proxy.replicas }}
  selector:
    matchLabels:
      app: kube-oidc-proxy-{{ .Release.Name }}
  template:
    metadata:
      labels:
        app: kube-oidc-proxy-{{ .Release.Name }}
        app.kubernetes.io/name: cicd-proxy
        app.kubernetes.io/instance: cicd-proxy-{{ .Release.Name }}
        app.kubernetes.io/component: kube-oidc-proxy
        
    spec:
      serviceAccountName: cicd-proxy-{{ .Release.Name }}
      containers:
      - image: {{ .Values.cicd_proxy.image}}
        ports:
        - containerPort: 8443
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        name: kube-oidc-proxy-{{ .Release.Name }}
        command: ["kube-oidc-proxy"]
        args:
          - "--secure-port=8443"
          - "--tls-cert-file=/etc/oidc/tls/crt.pem"
          - "--tls-private-key-file=/etc/oidc/tls/key.pem"
          - "--oidc-client-id={{ .Values.cicd_proxy.oidc.audience }}"
          - "--oidc-issuer-url=https://{{ .Values.cicd_proxy.oidc.issuer }}"
          - "--oidc-username-claim={{ .Values.cicd_proxy.oidc.claims.user }}"
          {{ if .Values.cicd_proxy.oidc.claims.groups }}
          - "--oidc-groups-claim={{ .Values.cicd_proxy.oidc.claims.groups }}"
          {{ end }}
          {{ if .Values.cicd_proxy.explicit_certificate_trust }}
          - "--oidc-ca-file=/etc/oidc/oidc-ca.pem"
          {{ else }}
          - "--oidc-ca-file=/etc/ssl/certs/ca-certificates.crt"
          {{ end }}
        imagePullPolicy: {{ .Values.cicd_proxy.imagePullPolicy }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "all"
        volumeMounts:
          {{ if .Values.cicd_proxy.explicit_certificate_trust }}
          - name: kube-oidc-proxy-config
            mountPath: /etc/oidc
            readOnly: true
          {{ end }}
          - name: kube-oidc-proxy-tls
            mountPath: /etc/oidc/tls
            readOnly: true
          {{ if .Values.cicd_proxy.services.enable_tokenrequest | default false }}
          - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            name: cicd-proxy-token
          {{ end }}
        {{ if .Values.cicd_proxy.resources }}
        resources:
          {{ if .Values.cicd_proxy.resources.requests }}
          requests:
            {{ if .Values.cicd_proxy.resources.requests.memory }}
            memory: {{ quote .Values.cicd_proxy.resources.requests.memory }}
            {{ end }}
            {{ if .Values.cicd_proxy.resources.requests.cpu }}
            cpu: {{ quote .Values.cicd_proxy.resources.requests.cpu }}
            {{ end }}
          {{ end }}
          {{ if .Values.cicd_proxy.resources.limits }}
          limits:
            {{ if .Values.cicd_proxy.resources.limits.memory }}
            memory: {{ quote .Values.cicd_proxy.resources.limits.memory }}
            {{ end }}
            {{ if .Values.cicd_proxy.resources.limits.cpu }}
            cpu: {{ quote .Values.cicd_proxy.resources.limits.cpu }}
            {{ end }}
          {{ end }}
        {{ end }}
      volumes:
        {{ if .Values.cicd_proxy.explicit_certificate_trust }}
        - name: kube-oidc-proxy-config
          secret:
            secretName: oidc-ca
            items:
            - key: tls.crt
              path: oidc-ca.pem
        {{ end }}
        {{ if .Values.cicd_proxy.services.enable_tokenrequest | default false }}
        - name: cicd-proxy-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: {{ .Values.cicd_proxy.services.token_request_audience | default "https://kubernetes.default.svc.cluster.local" }}
                expirationSeconds: {{ .Values.cicd_proxy.services.token_request_expiration_seconds | default 600 }}
                path: "token"
            - configMap:
                items:
                - key: "ca.crt"
                  path: "ca.crt"
                name: "kube-root-ca.crt"
            - configMap:
                items:
                - key: namespace
                  path: namespace
                name: namespace-holder
        {{ end }}
        - name: kube-oidc-proxy-tls
          secret:
            secretName: kube-oidc-proxy-tls
            items:
            - key: tls.crt
              path: crt.pem
            - key: tls.key
              path: key.pem
      {{ $length := len .Values.cicd_proxy.services.node_selectors }}
      {{ if eq $length 0  }}
      nodeSelector: {}
      {{ else }}
      nodeSelector: {{ range $key,$value := .Values.cicd_proxy.services.node_selectors }}
        {{ $key }}: {{ quote $value }}
      {{ end }}
      {{ end }}

      {{ if .Values.cicd_proxy.services.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.cicd_proxy.services.pullSecret }}
      {{ end }}
      automountServiceAccountToken: {{ not (.Values.cicd_proxy.services.enable_tokenrequest | default false) }}
      {{ if .Capabilities.APIVersions.Has "project.openshift.io/v1/Project" }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
      {{ else }}
      securityContext:
        fsGroup: 10001
        supplementalGroups: [10001]
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
      {{ end }}

