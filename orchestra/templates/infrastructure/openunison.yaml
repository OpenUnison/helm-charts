{{- $root := . -}}
---
apiVersion: openunison.tremolo.io/v6
kind: OpenUnison
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "20"
    helm-update: {{ now | date "Jan 2 15:04:05 2006 MST" }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison
    app.kubernetes.io/part-of: openunison
spec:
  dest_secret: {{ .Release.Name }}
  
  {{ if .Values.openunison.enable_provisioning }}
  enable_activemq: true
  {{ else }}
  enable_activemq: false
  {{ end }}
  activemq_image: {{ .Values.amq_image }}
  hosts:
  - ingress_name: openunison
    names:
    - env_var: OU_HOST
      name: {{ .Values.network.openunison_host }}
    {{ if .Values.dashboard.enabled }}
    - env_var: K8S_DASHBOARD_HOST
      name: {{ .Values.network.dashboard_host }}
    {{ end }}
    {{ if eq .Values.enable_impersonation true }}
    - env_var: K8S_API_HOST
      name: {{ .Values.network.api_server_host }}
      {{ if eq .Values.impersonation.use_jetstack true }}
      service_name: kube-oidc-proxy-{{ .Release.Name }}
      {{ end }}
    {{ end }}
    secret_name: ou-tls-certificate
    ingress_type: {{ .Values.network.ingress_type | default "nginx" }}
    {{ $ingress_annotations := .Values.network.ingress_annotations }}
    {{ $length := len $ingress_annotations }}
    {{ if eq $length 0  }}
    annotations: []
    {{ else }}
    annotations: {{ range $key,$value := $ingress_annotations }}
    - name: {{ $key }}
      value: {{ quote $value }}
      {{ end }}
    {{ end }}
  key_store:
    update_controller:
      image: {{ .Values.cert_update_image | default "docker.io/tremolosecurity/kubernetes-artifact-deployment:1.1.0" }}
      schedule: 0 2 * * *
      days_to_expire: 10
    key_pairs:
      create_keypair_template:
      - name: ou
        value: {{ .Values.cert_template.ou | quote  }}
      - name: o
        value: {{ .Values.cert_template.o | quote }}
      - name: l
        value: {{ .Values.cert_template.l | quote }}
      - name: st
        value: {{ .Values.cert_template.st | quote }}
      - name: c
        value: {{ .Values.cert_template.c | quote }}
      keys: 
        {{ range $keyconfig := .Values.openunison.keys}}
        - name: {{ $keyconfig.name }}
          import_into_ks: {{ $keyconfig.import_into_ks }}
          tls_secret_name: {{ $keyconfig.tls_secret_name }}{{ $root.Values.openunison.secret_ext }}
          {{ if $keyconfig.create_data }}
          create_data:
            ca_cert: {{$keyconfig.create_data.ca_cert}}
            key_size: {{$keyconfig.create_data.key_size}}
            server_name: {{$keyconfig.create_data.server_name}}
            sign_by_k8s_ca: false
            {{ if $keyconfig.create_data.subject_alternative_names }}
            {{ $len_san := len $keyconfig.create_data.subject_alternative_names }}
            {{ if eq $len_san 0}}
            subject_alternative_names: []
            {{ else }}
            subject_alternative_names:
            {{ range $keyconfig.create_data.subject_alternative_names }}
            - {{ . }}
            {{ end }}
            {{ end }}
            {{ else }}
            subject_alternative_names: []
            {{ end }}
            target_namespace: {{ $keyconfig.create_data.target_namespace | default  $root.Release.Namespace }}
            {{ if $keyconfig.create_data.secret_info }}
            secret_info:
              type_of_secret: {{ $keyconfig.create_data.secret_info.type_of_secret | default "kubernetes.io/tls" }}
              cert_name: {{ $keyconfig.create_data.secret_info.type_of_secret.cert_name | default "tls.crt" }}
              key_name: {{ $keyconfig.create_data.secret_info.type_of_secret.key_name | default "tls.key" }}
            {{ end }}
            {{ if $keyconfig.create_data.patch_info }}
            patch_info:
              annotation_name: {{$keyconfig.create_data.patch_info}}
              url: {{$keyconfig.create_data.url}}
            {{ end }}
            {{ if $keyconfig.create_data.delete_pod_labels }}
            delete_pod_labels:
            {{ range $keyconfig.create_data.delete_pod_labels }}
            - .
            {{ end }}
            {{ end }}
          {{ end }}
          
        {{ end }}
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: openunison-{{ .Release.Name }}.{{ .Release.Namespace }}.svc
            sign_by_k8s_ca: {{ .Values.certs.use_k8s_cm }}
            {{ if eq .Values.enable_impersonation true }}
            subject_alternative_names:
            - {{ .Values.network.api_server_host }}
            {{ else }}
            subject_alternative_names: []
            {{ end }}
          import_into_ks: keypair
          name: unison-tls
        
        {{ if .Values.network.createIngressCertificate }}
        - create_data:
            ca_cert: false
            key_size: 2048
            server_name: {{ .Values.network.openunison_host }}
            sign_by_k8s_ca: false
            subject_alternative_names:
              - {{ .Values.network.dashboard_host }} 
              {{ if eq .Values.enable_impersonation true }}
              - {{ .Values.network.api_server_host }}
              {{ end }} 
              {{ if and (.Values.openunison.management_proxy) (eq .Values.openunison.management_proxy.enabled true)  }}
              - {{ .Values.openunison.management_proxy.host }}
              {{ end }}
          import_into_ks: certificate
          name: unison-ca
          tls_secret_name: ou-tls-certificate
        {{ end }}
        {{ if .Values.dashboard.enabled }}
        - create_data:
            {{ if .Values.certs.use_k8s_cm }}
            ca_cert: false
            {{ else }}
            ca_cert: true
            {{ end }}
            key_size: 2048
            server_name: {{ .Values.dashboard.service_name }}.{{ .Values.dashboard.namespace }}.svc
            sign_by_k8s_ca: {{ .Values.certs.use_k8s_cm }}
            {{ if .Values.dashboard.new }}
            subject_alternative_names:
            - {{ .Values.dashboard.auth_service_name }}.{{ .Values.dashboard.namespace }}.svc
            - {{ .Values.dashboard.web_service_name }}.{{ .Values.dashboard.namespace }}.svc
            - {{ .Values.dashboard.api_service_name }}.{{ .Values.dashboard.namespace }}.svc
            {{ else }}
            subject_alternative_names: []
            {{ end }}
            target_namespace: {{ .Values.dashboard.namespace }}
            secret_info:
              type_of_secret: Opaque
              cert_name: dashboard.crt
              key_name: dashboard.key
            delete_pods_labels:
              {{ if .Values.dashboard.new }}
              - {{ .Values.dashboard.new_label }}
              {{ else }}
              - {{ .Values.dashboard.label }}
              {{ end }}
          {{ if .Values.certs.use_k8s_cm  }}
          import_into_ks: "none"
          {{ else }}
          import_into_ks: "certificate"
          {{ end }}
          name: kubernetes-dashboard
          tls_secret_name: {{ .Values.dashboard.cert_name }}
          replace_if_exists: true
        {{ end }}
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: unison-saml2-rp-sig
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: unison-saml2-rp-sig
          tls_secret_name: unison-saml2-rp-sig{{ .Values.openunison.secret_ext }}
        - create_data:
            ca_cert: false
            key_size: 2048
            server_name: remote-k8s-idp-sig
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: remote-k8s-idp-sig
          tls_secret_name: remote-k8s-idp-sig{{ .Values.openunison.secret_ext }}
        {{ if .Values.openunison.enable_provisioning }}
        - create_data:
            ca_cert: false
            key_size: 2048
            server_name: amq.openunison.svc
            sign_by_k8s_ca: {{ .Values.certs.use_k8s_cm }}
            {{ if .Values.openunison.amq.ha }}
            subject_alternative_names:
            - amq-backup.openunison.svc
            {{ if .Values.openunison.amq.cert_host }}
            {{ range $host := .Values.openunison.amq.cert_host }}
            - {{ $host }}
            {{ end }}
            {{ end }}
            {{ else }}
            subject_alternative_names: []
            {{ end }}
            {{ if .Values.openunison.amq.external_server_cert }}
            secret_info:
                cert_name: tls.crt
                key_name: tls.key
            {{ end }}
          {{ if .Values.certs.use_k8s_cm  }}
          import_into_ks: "none"
          {{ else if .Values.openunison.amq.external_server_cert }}
          import_into_ks: "certificate"
          {{ else }}
          import_into_ks: "certificate"
          {{ end }}
          name: amq-server
          {{ if .Values.openunison.amq.external_server_cert }}
          replace_if_exists: false
          {{ else }}
          replace_if_exists: true
          {{ end }}
          tls_secret_name: {{ .Release.Name }}-amq-server{{ .Values.openunison.secret_ext }}
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: amq-client
            sign_by_k8s_ca: false
            subject_alternative_names: []
            {{ if .Values.openunison.amq.external_client_cert }}
            secret_info:
                cert_name: tls.crt
                key_name: tls.key
            {{ end }}
          import_into_ks: keypair
          name: amq-client
          tls_secret_name: {{ .Release.Name }}-amq-client{{ .Values.openunison.secret_ext }}
          {{ if .Values.openunison.amq.external_client_cert }}
          replace_if_exists: false
          {{ else }}
          replace_if_exists: true
          {{ end }}
        {{ end }}
    static_keys: 
    - name: session-unison
      version: 1
    - name: lastmile-oidc
      version: 1
    
    {{ $length := len .Values.trusted_certs }}
    {{ if eq $length 0 }}
    trusted_certificates: []
    {{ else }}
    trusted_certificates: {{ range .Values.trusted_certs }}
      - name: {{ .name }}
        pem_data: {{ .pem_b64 }} {{ end }}
    {{ end }}
  myvd_configmap: {{ .Values.myvd_configmap | quote }}
  non_secret_data: 
    - name: K8S_URL
      {{ if eq .Values.enable_impersonation true }}
      value: https://{{ .Values.network.api_server_host }}
      {{ else }}
      value: {{ .Values.network.k8s_url }}
      {{ end }}
    - name: SESSION_INACTIVITY_TIMEOUT_SECONDS
      value: {{ .Values.network.session_inactivity_timeout_seconds | quote }}
    {{ if .Values.dashboard.enabled }}
    - name: K8S_DASHBOARD_NAMESPACE
      value: {{ .Values.dashboard.namespace }}
    - name: K8S_DASHBOARD_SERVICE
      value: {{ .Values.dashboard.service_name }}
    {{ end }}
    - name: K8S_CLUSTER_NAME
      value: {{ .Values.k8s_cluster_name }}
    {{ if .Values.openunison.make_secrets_readonly }}
    - name: openunison.static-secret.skip_write
      value: "true"
    - name: openunison.static-secret.suffix
      value: "{{ .Values.openunison.secret_ext }}"
    {{ end }}

{{ if .Values.openunison.enable_provisioning }}
    - name: OPENUNISON_PROVISIONING_ENABLED
      {{ if .Values.openunison.naas.readOnly }}
      value: "false"
      {{ else }}
      value: "true"
      {{ end }}
    - name: OU_HIBERNATE_DIALECT
      value: {{ .Values.database.hibernate_dialect }}
    - name: OU_QUARTZ_DIALECT
      value: {{ .Values.database.quartz_dialect }}
    - name: OU_JDBC_DRIVER
      value: {{ .Values.database.driver }}
    - name: OU_JDBC_URL
      value: {{ .Values.database.url }}
    - name: OU_JDBC_USER
      value: {{ .Values.database.user }}
    - name: OU_JDBC_VALIDATION
      value: {{ .Values.database.validation }}
    - name: SMTP_HOST
      value: {{ .Values.smtp.host }}
    - name: SMTP_PORT
      value: {{ .Values.smtp.port | quote }}
    - name: SMTP_USER
      value: {{ .Values.smtp.user }}
    - name: SMTP_FROM
      value: {{ .Values.smtp.from }}
    - name: SMTP_TLS
      value: {{ .Values.smtp.tls | quote }}
    - name: "openunison.naas.external"
      value: "{{ .Values.openunison.naas.groups.external.enabled }}"
    - name: "openunison.naas.internal"
      value: "{{ .Values.openunison.naas.groups.internal.enabled }}"
    - name: "openunison.naas.external-suffix"
      value: "{{ .Values.openunison.naas.groups.external.suffix }}"
    - name: "openunison.naas.internal-suffix"
      value: "{{ .Values.openunison.naas.groups.internal.suffix }}"
    - name: "openunison.naas.default-groups"
      value: {{ .Values.openunison.naas.groups.default | toJson | b64enc | quote }}
    - name: "openunison.naas.roles"
      value: {{ .Values.openunison.naas.groups.roles | toJson | b64enc | quote }}
{{ else }}
    - name: OPENUNISON_PROVISIONING_ENABLED
      value: "false"
{{ end }}

    - name: K8S_IMPERSONATION
      value: {{ .Values.enable_impersonation | quote }}
    - name: PROMETHEUS_SERVICE_ACCOUNT
      value: {{ .Values.monitoring.prometheus_service_account}}
    - name: OU_SVC_NAME
      value: openunison-{{ .Release.Name }}.{{ .Release.Namespace }}.svc
    {{ if eq .Values.services.enable_tokenrequest true }}
    - name: K8S_TOKEN_TYPE
      value: tokenapi
    {{ else }}
    - name: K8S_TOKEN_TYPE
      value: legacy
    {{ end }}
    {{ range $key,$value := .Values.openunison.non_secret_data }}
    - name: {{ $key }}
      value: {{ $value | quote }}
      {{ end }}
    - name: K8S_OPENUNISON_NS
      value: "{{ .Release.Namespace }}"
  openunison_network_configuration:
    activemq_dir: "/tmp/amq"
    allowed_client_names: []
    ciphers:
    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    client_auth: none
    force_to_secure: {{ .Values.network.force_redirect_to_tls}}
    open_external_port: 80
    open_port: 8080
    path_to_deployment: "/usr/local/openunison/work"
    path_to_env_file: "/etc/openunison/ou.env"
    quartz_dir: "/tmp/quartz"
    secure_external_port: 443
    secure_key_alias: unison-tls
    secure_port: 8443
    {{ if .Values.openunison.enable_provisioning}}
    queue_configuration:
      use_internal_queue: false
      max_producers: {{ .Values.openunison.queue.max_producers }}
      connection_factory: {{ .Values.openunison.queue.connection_factory }}
      max_consumers: {{ .Values.openunison.queue.max_consumers }}
      max_sessions_per_connection: {{ .Values.openunison.queue.max_sessions_per_connection }}
      task_queue_name: {{ .Values.openunison.queue.task_queue_name }}
      smtp_queue_name: {{ .Values.openunison.queue.smtp_queue_name }}
      encryption_key_name: {{ .Values.openunison.queue.encryption_key_name }}
      num_queues: {{ .Values.openunison.queue.num_queues }}
      multi_task_queues: {{ .Values.openunison.queue.multi_task_queues }}
      keep_alive_millis: {{ .Values.openunison.queue.keep_alive_millis }}
      {{ if .Values.openunison.queue.manual_dlq }}
      manual_dlq: {{ .Values.openunison.queue.manual_dlq }}
      manual_dlq_max_attempts: {{ .Values.openunison.queue.manual_dlq_max_attempts }}
      manual_dlq_name: {{ .Values.openunison.queue.manual_dlq_name }}
      {{ end }}
      params:
      {{ range $param := .Values.openunison.queue.params }}
      - name: {{ $param.name | quote }}
        source_type: {{ $param.source_type | quote }}
        value: {{ $param.value | quote  }}
      {{ end }}
    {{ end }}
  replicas: {{ .Values.openunison.replicas }}
  secret_data:
    - AD_BIND_PASSWORD
    - K8S_DB_SECRET
    - unisonKeystorePassword

{{ if .Values.openunison.enable_provisioning }}
    - SMTP_PASSWORD
    - OU_JDBC_PASSWORD
{{ end }}

    {{ range .Values.openunison.secrets }}
    - {{ . }}
    {{ end }}
  source_secret: orchestra-secrets-source
  image: {{ .Values.image }}
  deployment_data:
    tokenrequest_api:
      enabled: {{ .Values.services.enable_tokenrequest | default false }}
      audience: {{ .Values.services.token_request_audience | default "api" }}
      expirationSeconds: {{ .Values.services.token_request_expiration_seconds | default 60000 }}
    liveness_probe_command:
    {{ range $line := .Values.services.liveness_probe }}
    - {{ $line }}
    {{ end }}
    readiness_probe_command:
    {{ range $line := .Values.services.readiness_probe }}
    - {{ $line }}
    {{ end }}
    pull_secret: {{ .Values.services.pullSecret | quote }}
    
    {{ $length := len .Values.services.node_selectors }}
    {{ if eq $length 0  }}
    node_selectors: []
    {{ else }}
    node_selectors: {{ range $key,$value := .Values.services.node_selectors }}
    - name: {{ $key }}
      value: {{ $value }}
      {{ end }}
    {{ end }}
    {{ if .Values.services.resources }}
    resources:
      {{ if .Values.services.resources.requests }}
      requests:
        {{ if .Values.services.resources.requests.memory }}
          memory: {{ .Values.services.resources.requests.memory | quote }}
        {{ end }}
        {{ if .Values.services.resources.requests.cpu }}
          cpu: {{ .Values.services.resources.requests.cpu | quote }}
        {{ end }}
      {{ end }}
      {{ if .Values.services.resources.limits }}
      limits:
        {{ if .Values.services.resources.limits.memory }}
          memory: {{ .Values.services.resources.limits.memory | quote }}
        {{ end }}
        {{ if .Values.services.resources.limits.cpu }}
          cpu: {{ .Values.services.resources.limits.cpu | quote }}
        {{ end }}
      {{ end }}
    {{ end }}
{{ if .Values.openunison.enable_provisioning }}
{{ if eq (substr 0 15 .Values.database.url)  "jdbc:postgresql"}}
  sql_check_query: "SELECT FROM pg_tables WHERE  schemaname = 'public' AND  tablename  = 'approvers';"
  run_sql: |-
    SET statement_timeout = 0;
    SET lock_timeout = 0;
    SET idle_in_transaction_session_timeout = 0;
    SET client_encoding = 'UTF8';
    SET standard_conforming_strings = on;
    SELECT pg_catalog.set_config('search_path', '', false);
    SET check_function_bodies = false;
    SET xmloption = content;
    SET client_min_messages = warning;
    SET row_security = off;

    SET default_tablespace = '';

    SET default_table_access_method = heap;


    CREATE TABLE public.activemq_acks (
        container character varying(250) NOT NULL,
        sub_dest character varying(250),
        client_id character varying(250) NOT NULL,
        sub_name character varying(250) NOT NULL,
        selector character varying(250),
        last_acked_id bigint,
        priority bigint DEFAULT 5 NOT NULL,
        xid character varying(250)
    );


    ALTER TABLE public.activemq_acks OWNER TO postgres;


    CREATE TABLE public.activemq_lock (
        id bigint NOT NULL,
        "time" bigint,
        broker_name character varying(250)
    );


    ALTER TABLE public.activemq_lock OWNER TO postgres;


    CREATE TABLE public.activemq_msgs (
        id bigint NOT NULL,
        container character varying(250) NOT NULL,
        msgid_prod character varying(250),
        msgid_seq bigint,
        expiration bigint,
        msg bytea,
        priority bigint,
        xid character varying(250)
    );


    ALTER TABLE public.activemq_msgs OWNER TO postgres;


    CREATE TABLE public.allowedapprovers (
        id integer NOT NULL,
        approval integer NOT NULL,
        approver integer NOT NULL
    );


    ALTER TABLE public.allowedapprovers OWNER TO postgres;


    CREATE SEQUENCE public.allowedapprovers_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.allowedapprovers_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.allowedapprovers_id_seq OWNED BY public.allowedapprovers.id;



    CREATE TABLE public.approvals (
        id integer NOT NULL,
        approved integer,
        approvedts timestamp without time zone,
        createts timestamp without time zone,
        label character varying(255),
        reason character varying(255),
        workflowobj text,
        approver integer,
        workflow integer NOT NULL
    );


    ALTER TABLE public.approvals OWNER TO postgres;


    CREATE SEQUENCE public.approvals_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.approvals_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.approvals_id_seq OWNED BY public.approvals.id;



    CREATE TABLE public.approverattributes (
        id integer NOT NULL,
        name character varying(255) NOT NULL,
        value character varying(255) NOT NULL,
        approverid integer NOT NULL
    );


    ALTER TABLE public.approverattributes OWNER TO postgres;


    CREATE SEQUENCE public.approverattributes_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.approverattributes_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.approverattributes_id_seq OWNED BY public.approverattributes.id;



    CREATE TABLE public.approvers (
        id integer NOT NULL,
        userkey character varying(255)
    );


    ALTER TABLE public.approvers OWNER TO postgres;


    CREATE SEQUENCE public.approvers_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.approvers_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.approvers_id_seq OWNED BY public.approvers.id;



    CREATE TABLE public.auditlogs (
        id integer NOT NULL,
        attribute character varying(255),
        isentry integer NOT NULL,
        val text,
        approval integer,
        actiontype integer NOT NULL,
        target integer,
        userid integer,
        workflow integer
    );


    ALTER TABLE public.auditlogs OWNER TO postgres;


    CREATE SEQUENCE public.auditlogs_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.auditlogs_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.auditlogs_id_seq OWNED BY public.auditlogs.id;



    CREATE TABLE public.auditlogtype (
        id integer NOT NULL,
        name character varying(255) NOT NULL
    );


    ALTER TABLE public.auditlogtype OWNER TO postgres;


    CREATE SEQUENCE public.auditlogtype_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.auditlogtype_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.auditlogtype_id_seq OWNED BY public.auditlogtype.id;



    CREATE TABLE public.escalation (
        id integer NOT NULL,
        whents timestamp without time zone NOT NULL,
        approval integer NOT NULL
    );


    ALTER TABLE public.escalation OWNER TO postgres;


    CREATE SEQUENCE public.escalation_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.escalation_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.escalation_id_seq OWNED BY public.escalation.id;



    CREATE TABLE public.qrtz_blob_triggers (
        sched_name character varying(120) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        blob_data bytea
    );


    ALTER TABLE public.qrtz_blob_triggers OWNER TO postgres;


    CREATE TABLE public.qrtz_calendars (
        sched_name character varying(120) NOT NULL,
        calendar_name character varying(200) NOT NULL,
        calendar bytea NOT NULL
    );


    ALTER TABLE public.qrtz_calendars OWNER TO postgres;


    CREATE TABLE public.qrtz_cron_triggers (
        sched_name character varying(120) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        cron_expression character varying(120) NOT NULL,
        time_zone_id character varying(80)
    );


    ALTER TABLE public.qrtz_cron_triggers OWNER TO postgres;


    CREATE TABLE public.qrtz_fired_triggers (
        sched_name character varying(120) NOT NULL,
        entry_id character varying(95) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        instance_name character varying(200) NOT NULL,
        fired_time bigint NOT NULL,
        sched_time bigint NOT NULL,
        priority integer NOT NULL,
        state character varying(16) NOT NULL,
        job_name character varying(200),
        job_group character varying(200),
        is_nonconcurrent boolean,
        requests_recovery boolean
    );


    ALTER TABLE public.qrtz_fired_triggers OWNER TO postgres;


    CREATE TABLE public.qrtz_job_details (
        sched_name character varying(120) NOT NULL,
        job_name character varying(200) NOT NULL,
        job_group character varying(200) NOT NULL,
        description character varying(250),
        job_class_name character varying(250) NOT NULL,
        is_durable boolean NOT NULL,
        is_nonconcurrent boolean NOT NULL,
        is_update_data boolean NOT NULL,
        requests_recovery boolean NOT NULL,
        job_data bytea
    );


    ALTER TABLE public.qrtz_job_details OWNER TO postgres;


    CREATE TABLE public.qrtz_locks (
        sched_name character varying(120) NOT NULL,
        lock_name character varying(40) NOT NULL
    );


    ALTER TABLE public.qrtz_locks OWNER TO postgres;


    CREATE TABLE public.qrtz_paused_trigger_grps (
        sched_name character varying(120) NOT NULL,
        trigger_group character varying(200) NOT NULL
    );


    ALTER TABLE public.qrtz_paused_trigger_grps OWNER TO postgres;


    CREATE TABLE public.qrtz_scheduler_state (
        sched_name character varying(120) NOT NULL,
        instance_name character varying(200) NOT NULL,
        last_checkin_time bigint NOT NULL,
        checkin_interval bigint NOT NULL
    );


    ALTER TABLE public.qrtz_scheduler_state OWNER TO postgres;


    CREATE TABLE public.qrtz_simple_triggers (
        sched_name character varying(120) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        repeat_count bigint NOT NULL,
        repeat_interval bigint NOT NULL,
        times_triggered bigint NOT NULL
    );


    ALTER TABLE public.qrtz_simple_triggers OWNER TO postgres;


    CREATE TABLE public.qrtz_simprop_triggers (
        sched_name character varying(120) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        str_prop_1 character varying(512),
        str_prop_2 character varying(512),
        str_prop_3 character varying(512),
        int_prop_1 integer,
        int_prop_2 integer,
        long_prop_1 bigint,
        long_prop_2 bigint,
        dec_prop_1 numeric(13,4),
        dec_prop_2 numeric(13,4),
        bool_prop_1 boolean,
        bool_prop_2 boolean
    );


    ALTER TABLE public.qrtz_simprop_triggers OWNER TO postgres;


    CREATE TABLE public.qrtz_triggers (
        sched_name character varying(120) NOT NULL,
        trigger_name character varying(200) NOT NULL,
        trigger_group character varying(200) NOT NULL,
        job_name character varying(200) NOT NULL,
        job_group character varying(200) NOT NULL,
        description character varying(250),
        next_fire_time bigint,
        prev_fire_time bigint,
        priority integer,
        trigger_state character varying(16) NOT NULL,
        trigger_type character varying(8) NOT NULL,
        start_time bigint NOT NULL,
        end_time bigint,
        calendar_name character varying(200),
        misfire_instr smallint,
        job_data bytea
    );


    ALTER TABLE public.qrtz_triggers OWNER TO postgres;


    CREATE TABLE public.targets (
        id integer NOT NULL,
        name character varying(255) NOT NULL
    );


    ALTER TABLE public.targets OWNER TO postgres;


    CREATE SEQUENCE public.targets_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.targets_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.targets_id_seq OWNED BY public.targets.id;



    CREATE TABLE public.userattributes (
        id integer NOT NULL,
        name character varying(255) NOT NULL,
        value character varying(255) NOT NULL,
        userid integer NOT NULL
    );


    ALTER TABLE public.userattributes OWNER TO postgres;


    CREATE SEQUENCE public.userattributes_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.userattributes_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.userattributes_id_seq OWNED BY public.userattributes.id;



    CREATE TABLE public.users (
        id integer NOT NULL,
        userkey character varying(255) NOT NULL
    );


    ALTER TABLE public.users OWNER TO postgres;


    CREATE SEQUENCE public.users_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.users_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;



    CREATE TABLE public.workflowparameters (
        id integer NOT NULL,
        name character varying(255) NOT NULL,
        value character varying(255) NOT NULL,
        workflow integer NOT NULL
    );


    ALTER TABLE public.workflowparameters OWNER TO postgres;


    CREATE SEQUENCE public.workflowparameters_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.workflowparameters_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.workflowparameters_id_seq OWNED BY public.workflowparameters.id;



    CREATE TABLE public.workflows (
        id integer NOT NULL,
        completets timestamp without time zone,
        description text,
        label character varying(255),
        name character varying(255) NOT NULL,
        requestreason character varying(255),
        startts timestamp without time zone,
        requesterid integer,
        userid integer
    );


    ALTER TABLE public.workflows OWNER TO postgres;


    CREATE SEQUENCE public.workflows_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    ALTER TABLE public.workflows_id_seq OWNER TO postgres;


    ALTER SEQUENCE public.workflows_id_seq OWNED BY public.workflows.id;



    ALTER TABLE ONLY public.allowedapprovers ALTER COLUMN id SET DEFAULT nextval('public.allowedapprovers_id_seq'::regclass);



    ALTER TABLE ONLY public.approvals ALTER COLUMN id SET DEFAULT nextval('public.approvals_id_seq'::regclass);



    ALTER TABLE ONLY public.approverattributes ALTER COLUMN id SET DEFAULT nextval('public.approverattributes_id_seq'::regclass);



    ALTER TABLE ONLY public.approvers ALTER COLUMN id SET DEFAULT nextval('public.approvers_id_seq'::regclass);



    ALTER TABLE ONLY public.auditlogs ALTER COLUMN id SET DEFAULT nextval('public.auditlogs_id_seq'::regclass);



    ALTER TABLE ONLY public.auditlogtype ALTER COLUMN id SET DEFAULT nextval('public.auditlogtype_id_seq'::regclass);



    ALTER TABLE ONLY public.escalation ALTER COLUMN id SET DEFAULT nextval('public.escalation_id_seq'::regclass);



    ALTER TABLE ONLY public.targets ALTER COLUMN id SET DEFAULT nextval('public.targets_id_seq'::regclass);



    ALTER TABLE ONLY public.userattributes ALTER COLUMN id SET DEFAULT nextval('public.userattributes_id_seq'::regclass);



    ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);



    ALTER TABLE ONLY public.workflowparameters ALTER COLUMN id SET DEFAULT nextval('public.workflowparameters_id_seq'::regclass);



    ALTER TABLE ONLY public.workflows ALTER COLUMN id SET DEFAULT nextval('public.workflows_id_seq'::regclass);



    ALTER TABLE ONLY public.activemq_lock
        ADD CONSTRAINT activemq_lock_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.activemq_msgs
        ADD CONSTRAINT activemq_msgs_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.allowedapprovers
        ADD CONSTRAINT allowedapprovers_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.approvals
        ADD CONSTRAINT approvals_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.approverattributes
        ADD CONSTRAINT approverattributes_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.approvers
        ADD CONSTRAINT approvers_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.auditlogs
        ADD CONSTRAINT auditlogs_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.auditlogtype
        ADD CONSTRAINT auditlogtype_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.escalation
        ADD CONSTRAINT escalation_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.activemq_acks
        ADD CONSTRAINT pk_activemq_acks PRIMARY KEY (container, client_id, sub_name);



    ALTER TABLE ONLY public.qrtz_blob_triggers
        ADD CONSTRAINT qrtz_blob_triggers_pkey PRIMARY KEY (sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_calendars
        ADD CONSTRAINT qrtz_calendars_pkey PRIMARY KEY (sched_name, calendar_name);



    ALTER TABLE ONLY public.qrtz_cron_triggers
        ADD CONSTRAINT qrtz_cron_triggers_pkey PRIMARY KEY (sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_fired_triggers
        ADD CONSTRAINT qrtz_fired_triggers_pkey PRIMARY KEY (sched_name, entry_id);



    ALTER TABLE ONLY public.qrtz_job_details
        ADD CONSTRAINT qrtz_job_details_pkey PRIMARY KEY (sched_name, job_name, job_group);



    ALTER TABLE ONLY public.qrtz_locks
        ADD CONSTRAINT qrtz_locks_pkey PRIMARY KEY (sched_name, lock_name);



    ALTER TABLE ONLY public.qrtz_paused_trigger_grps
        ADD CONSTRAINT qrtz_paused_trigger_grps_pkey PRIMARY KEY (sched_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_scheduler_state
        ADD CONSTRAINT qrtz_scheduler_state_pkey PRIMARY KEY (sched_name, instance_name);



    ALTER TABLE ONLY public.qrtz_simple_triggers
        ADD CONSTRAINT qrtz_simple_triggers_pkey PRIMARY KEY (sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_simprop_triggers
        ADD CONSTRAINT qrtz_simprop_triggers_pkey PRIMARY KEY (sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_triggers
        ADD CONSTRAINT qrtz_triggers_pkey PRIMARY KEY (sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.targets
        ADD CONSTRAINT targets_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.userattributes
        ADD CONSTRAINT userattributes_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.users
        ADD CONSTRAINT users_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.workflowparameters
        ADD CONSTRAINT workflowparameters_pkey PRIMARY KEY (id);



    ALTER TABLE ONLY public.workflows
        ADD CONSTRAINT workflows_pkey PRIMARY KEY (id);



    CREATE INDEX activemq_acks_xidx ON public.activemq_acks USING btree (xid);



    CREATE INDEX activemq_msgs_cidx ON public.activemq_msgs USING btree (container);



    CREATE INDEX activemq_msgs_eidx ON public.activemq_msgs USING btree (expiration);



    CREATE INDEX activemq_msgs_iidx ON public.activemq_msgs USING btree (id, xid, container);



    CREATE INDEX activemq_msgs_midx ON public.activemq_msgs USING btree (msgid_prod, msgid_seq);



    CREATE INDEX activemq_msgs_pidx ON public.activemq_msgs USING btree (priority);



    CREATE INDEX activemq_msgs_xidx ON public.activemq_msgs USING btree (xid);



    CREATE INDEX idx_qrtz_ft_inst_job_req_rcvry ON public.qrtz_fired_triggers USING btree (sched_name, instance_name, requests_recovery);



    CREATE INDEX idx_qrtz_ft_j_g ON public.qrtz_fired_triggers USING btree (sched_name, job_name, job_group);



    CREATE INDEX idx_qrtz_ft_jg ON public.qrtz_fired_triggers USING btree (sched_name, job_group);



    CREATE INDEX idx_qrtz_ft_t_g ON public.qrtz_fired_triggers USING btree (sched_name, trigger_name, trigger_group);



    CREATE INDEX idx_qrtz_ft_tg ON public.qrtz_fired_triggers USING btree (sched_name, trigger_group);



    CREATE INDEX idx_qrtz_ft_trig_inst_name ON public.qrtz_fired_triggers USING btree (sched_name, instance_name);



    CREATE INDEX idx_qrtz_j_grp ON public.qrtz_job_details USING btree (sched_name, job_group);



    CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (sched_name, requests_recovery);



    CREATE INDEX idx_qrtz_t_c ON public.qrtz_triggers USING btree (sched_name, calendar_name);



    CREATE INDEX idx_qrtz_t_g ON public.qrtz_triggers USING btree (sched_name, trigger_group);



    CREATE INDEX idx_qrtz_t_j ON public.qrtz_triggers USING btree (sched_name, job_name, job_group);



    CREATE INDEX idx_qrtz_t_jg ON public.qrtz_triggers USING btree (sched_name, job_group);



    CREATE INDEX idx_qrtz_t_n_g_state ON public.qrtz_triggers USING btree (sched_name, trigger_group, trigger_state);



    CREATE INDEX idx_qrtz_t_n_state ON public.qrtz_triggers USING btree (sched_name, trigger_name, trigger_group, trigger_state);



    CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (sched_name, next_fire_time);



    CREATE INDEX idx_qrtz_t_nft_misfire ON public.qrtz_triggers USING btree (sched_name, misfire_instr, next_fire_time);



    CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (sched_name, trigger_state, next_fire_time);



    CREATE INDEX idx_qrtz_t_nft_st_misfire ON public.qrtz_triggers USING btree (sched_name, misfire_instr, next_fire_time, trigger_state);



    CREATE INDEX idx_qrtz_t_nft_st_misfire_grp ON public.qrtz_triggers USING btree (sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state);



    CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (sched_name, trigger_state);



    ALTER TABLE ONLY public.userattributes
        ADD CONSTRAINT fk1fdqahaxylln2kvdcirntdus7 FOREIGN KEY (userid) REFERENCES public.users(id);



    ALTER TABLE ONLY public.auditlogs
        ADD CONSTRAINT fk37bhgh2oy3evaey113n1tbyta FOREIGN KEY (target) REFERENCES public.targets(id);



    ALTER TABLE ONLY public.approvals
        ADD CONSTRAINT fk5106341qr11yyqdn3xfj2qivj FOREIGN KEY (workflow) REFERENCES public.workflows(id);



    ALTER TABLE ONLY public.auditlogs
        ADD CONSTRAINT fk7jtmxfrjhjeqsiwl4dki65lqc FOREIGN KEY (actiontype) REFERENCES public.auditlogtype(id);



    ALTER TABLE ONLY public.escalation
        ADD CONSTRAINT fkb9a2uveqras28iokbmflu0r6d FOREIGN KEY (approval) REFERENCES public.approvals(id);



    ALTER TABLE ONLY public.workflowparameters
        ADD CONSTRAINT fkda7i6c6sodieql6p668mp4fkq FOREIGN KEY (workflow) REFERENCES public.workflows(id);



    ALTER TABLE ONLY public.auditlogs
        ADD CONSTRAINT fkdquv9n7oyd9e6ao2787je3d3h FOREIGN KEY (userid) REFERENCES public.users(id);



    ALTER TABLE ONLY public.allowedapprovers
        ADD CONSTRAINT fkel92fx0okym0rqt5bp0go8a9q FOREIGN KEY (approval) REFERENCES public.approvals(id);



    ALTER TABLE ONLY public.allowedapprovers
        ADD CONSTRAINT fkf2kv6sg17kgwlm999g7ovqpwy FOREIGN KEY (approver) REFERENCES public.approvers(id);



    ALTER TABLE ONLY public.approvals
        ADD CONSTRAINT fkf7pmu7cgxgts4o3l6sdueokk0 FOREIGN KEY (approver) REFERENCES public.approvers(id);



    ALTER TABLE ONLY public.approverattributes
        ADD CONSTRAINT fkfbjpbhv2aefrnyop0hwuhwsr3 FOREIGN KEY (approverid) REFERENCES public.approvers(id);



    ALTER TABLE ONLY public.workflows
        ADD CONSTRAINT fkg659n86ll8m9ykbwrvkouwmns FOREIGN KEY (userid) REFERENCES public.users(id);



    ALTER TABLE ONLY public.workflows
        ADD CONSTRAINT fkgv0no93i61ejpr5ijl6oekhjq FOREIGN KEY (requesterid) REFERENCES public.users(id);



    ALTER TABLE ONLY public.auditlogs
        ADD CONSTRAINT fkrmpsjnyik1rnwfyty62ca0eyi FOREIGN KEY (workflow) REFERENCES public.workflows(id);



    ALTER TABLE ONLY public.qrtz_blob_triggers
        ADD CONSTRAINT qrtz_blob_triggers_sched_name_trigger_name_trigger_group_fkey FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_cron_triggers
        ADD CONSTRAINT qrtz_cron_triggers_sched_name_trigger_name_trigger_group_fkey FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_simple_triggers
        ADD CONSTRAINT qrtz_simple_triggers_sched_name_trigger_name_trigger_group_fkey FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_simprop_triggers
        ADD CONSTRAINT qrtz_simprop_triggers_sched_name_trigger_name_trigger_grou_fkey FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group);



    ALTER TABLE ONLY public.qrtz_triggers
        ADD CONSTRAINT qrtz_triggers_sched_name_job_name_job_group_fkey FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group);

    CREATE TABLE public.localUsers (
        userid SERIAL PRIMARY KEY,
        firstName varchar(255) NOT NULL,
        lastName varchar(255) NOT NULL,
        mail varchar(255) NOT NULL,
        sub varchar(255) NOT NULL UNIQUE
    );

    CREATE TABLE public.localGroups (
        groupId SERIAL PRIMARY KEY,
        description varchar(255) NULL,
        name varchar(255) NOT NULL UNIQUE
    );

    CREATE TABLE public.userGroups(
        groupId int,
        userId int,
        CONSTRAINT fk_group
          FOREIGN KEY(groupId)
            REFERENCES public.localGroups(groupId),
        CONSTRAINT fk_user
          FOREIGN KEY(userId)
            REFERENCES public.localUsers(userId)

    );

    INSERT INTO public.localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators with approval access for new projects and new cluster admins');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO public.localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.external.suffix }}','System administrators with approval access for new projects and new cluster admins');
    {{ end }}
    
    INSERT INTO public.localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO public.localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.external.suffix }}','System administrators');
    {{ end }}
    
    INSERT INTO public.localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}','Kubernetes cluster administrators');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO public.localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}','Kubernetes cluster administrators');
    {{ end }}
    INSERT INTO public.localGroups (name,description) VALUES ('System','System level groups not assigned to local users');
    INSERT INTO public.localGroups (name,description) VALUES ('users','All users are members');

    INSERT INTO public.localUsers (mail,sub,firstName,lastName) VALUES ('','system','system','system');

    INSERT INTO public.userGroups (userId,groupId) VALUES (1,5);


{{ end }}
{{ if eq (substr 0 14 .Values.database.url)  "jdbc:sqlserver"}}
  sql_check_query: "SELECT 1  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_NAME='approvers'"
  run_sql: |-
    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
    ALTER TABLE [dbo].[QRTZ_TRIGGERS] DROP CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
    ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] DROP CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
    ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
    ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_BLOB_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
    ALTER TABLE [dbo].[QRTZ_BLOB_TRIGGERS] DROP CONSTRAINT FK_QRTZ_BLOB_TRIGGERS_QRTZ_TRIGGERS
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CALENDARS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_CALENDARS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CRON_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_CRON_TRIGGERS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_BLOB_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_BLOB_TRIGGERS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_FIRED_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_FIRED_TRIGGERS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_PAUSED_TRIGGER_GRPS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SCHEDULER_STATE]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_SCHEDULER_STATE]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_LOCKS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_LOCKS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_JOB_DETAILS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SIMPLE_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SIMPROP_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS]
    ;

    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
    DROP TABLE [dbo].[QRTZ_TRIGGERS]
    ;

    CREATE TABLE [dbo].[QRTZ_CALENDARS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [CALENDAR_NAME] [VARCHAR] (200)  NOT NULL ,
      [CALENDAR] [IMAGE] NOT NULL
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_CRON_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [CRON_EXPRESSION] [VARCHAR] (120)  NOT NULL ,
      [TIME_ZONE_ID] [VARCHAR] (80) 
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_FIRED_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [ENTRY_ID] [VARCHAR] (95)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [INSTANCE_NAME] [VARCHAR] (200)  NOT NULL ,
      [FIRED_TIME] [BIGINT] NOT NULL ,
      [SCHED_TIME] [BIGINT] NOT NULL ,
      [PRIORITY] [INTEGER] NOT NULL ,
      [STATE] [VARCHAR] (16)  NOT NULL,
      [JOB_NAME] [VARCHAR] (200)  NULL ,
      [JOB_GROUP] [VARCHAR] (200)  NULL ,
      [IS_NONCONCURRENT] [VARCHAR] (1)  NULL ,
      [REQUESTS_RECOVERY] [VARCHAR] (1)  NULL 
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL 
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_SCHEDULER_STATE] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [INSTANCE_NAME] [VARCHAR] (200)  NOT NULL ,
      [LAST_CHECKIN_TIME] [BIGINT] NOT NULL ,
      [CHECKIN_INTERVAL] [BIGINT] NOT NULL
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_LOCKS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [LOCK_NAME] [VARCHAR] (40)  NOT NULL 
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_JOB_DETAILS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [JOB_NAME] [VARCHAR] (200)  NOT NULL ,
      [JOB_GROUP] [VARCHAR] (200)  NOT NULL ,
      [DESCRIPTION] [VARCHAR] (250) NULL ,
      [JOB_CLASS_NAME] [VARCHAR] (250)  NOT NULL ,
      [IS_DURABLE] [VARCHAR] (1)  NOT NULL ,
      [IS_NONCONCURRENT] [VARCHAR] (1)  NOT NULL ,
      [IS_UPDATE_DATA] [VARCHAR] (1)  NOT NULL ,
      [REQUESTS_RECOVERY] [VARCHAR] (1)  NOT NULL ,
      [JOB_DATA] [IMAGE] NULL
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [REPEAT_COUNT] [BIGINT] NOT NULL ,
      [REPEAT_INTERVAL] [BIGINT] NOT NULL ,
      [TIMES_TRIGGERED] [BIGINT] NOT NULL
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [STR_PROP_1] [VARCHAR] (512) NULL,
      [STR_PROP_2] [VARCHAR] (512) NULL,
      [STR_PROP_3] [VARCHAR] (512) NULL,
      [INT_PROP_1] [INT] NULL,
      [INT_PROP_2] [INT] NULL,
      [LONG_PROP_1] [BIGINT] NULL,
      [LONG_PROP_2] [BIGINT] NULL,
      [DEC_PROP_1] [NUMERIC] (13,4) NULL,
      [DEC_PROP_2] [NUMERIC] (13,4) NULL,
      [BOOL_PROP_1] [VARCHAR] (1) NULL,
      [BOOL_PROP_2] [VARCHAR] (1) NULL,
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_BLOB_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [BLOB_DATA] [IMAGE] NULL
    ) ON [PRIMARY]
    ;

    CREATE TABLE [dbo].[QRTZ_TRIGGERS] (
      [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
      [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
      [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
      [JOB_NAME] [VARCHAR] (200)  NOT NULL ,
      [JOB_GROUP] [VARCHAR] (200)  NOT NULL ,
      [DESCRIPTION] [VARCHAR] (250) NULL ,
      [NEXT_FIRE_TIME] [BIGINT] NULL ,
      [PREV_FIRE_TIME] [BIGINT] NULL ,
      [PRIORITY] [INTEGER] NULL ,
      [TRIGGER_STATE] [VARCHAR] (16)  NOT NULL ,
      [TRIGGER_TYPE] [VARCHAR] (8)  NOT NULL ,
      [START_TIME] [BIGINT] NOT NULL ,
      [END_TIME] [BIGINT] NULL ,
      [CALENDAR_NAME] [VARCHAR] (200)  NULL ,
      [MISFIRE_INSTR] [SMALLINT] NULL ,
      [JOB_DATA] [IMAGE] NULL
    ) ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_CALENDARS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_CALENDARS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [CALENDAR_NAME]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_CRON_TRIGGERS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_FIRED_TRIGGERS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_FIRED_TRIGGERS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [ENTRY_ID]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_PAUSED_TRIGGER_GRPS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [TRIGGER_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_SCHEDULER_STATE] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_SCHEDULER_STATE] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [INSTANCE_NAME]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_LOCKS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_LOCKS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [LOCK_NAME]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_JOB_DETAILS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_JOB_DETAILS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [JOB_NAME],
        [JOB_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_SIMPLE_TRIGGERS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_SIMPROP_TRIGGERS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_TRIGGERS] WITH NOCHECK ADD
      CONSTRAINT [PK_QRTZ_TRIGGERS] PRIMARY KEY  CLUSTERED
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      )  ON [PRIMARY]
    ;

    ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] ADD
      CONSTRAINT [FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) ON DELETE CASCADE
    ;

    ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] ADD
      CONSTRAINT [FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) ON DELETE CASCADE
    ;

    ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] ADD
      CONSTRAINT [FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) ON DELETE CASCADE
    ;

    ALTER TABLE [dbo].[QRTZ_BLOB_TRIGGERS] ADD
      CONSTRAINT [FK_QRTZ_BLOB_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
      (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
        [SCHED_NAME],
        [TRIGGER_NAME],
        [TRIGGER_GROUP]
      ) ON DELETE CASCADE
    ;

    ALTER TABLE [dbo].[QRTZ_TRIGGERS] ADD
      CONSTRAINT [FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS] FOREIGN KEY
      (
        [SCHED_NAME],
        [JOB_NAME],
        [JOB_GROUP]
      ) REFERENCES [dbo].[QRTZ_JOB_DETAILS] (
        [SCHED_NAME],
        [JOB_NAME],
        [JOB_GROUP]
      )
    ;

    SET ANSI_NULLS ON
    ;

    SET QUOTED_IDENTIFIER ON
    ;

    SET ANSI_PADDING ON
    ;
    IF OBJECT_ID('dbo.ACTIVEMQ_ACKS','U') IS NOT NULL DROP TABLE [dbo].[ACTIVEMQ_ACKS];
    CREATE TABLE [dbo].[ACTIVEMQ_ACKS](
      [CONTAINER] [varchar](250) NOT NULL,
      [SUB_DEST] [varchar](250) NULL,
      [CLIENT_ID] [varchar](250) NOT NULL,
      [SUB_NAME] [varchar](250) NOT NULL,
      [SELECTOR] [varchar](250) NULL,
      [LAST_ACKED_ID] [bigint] NULL,
      [PRIORITY] [bigint] NOT NULL,
      [XID] [varchar](250) NULL,
    PRIMARY KEY CLUSTERED 
    (
      [CONTAINER] ASC,
      [CLIENT_ID] ASC,
      [SUB_NAME] ASC,
      [PRIORITY] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]

    ;

    SET ANSI_PADDING OFF
    ;

    ALTER TABLE [dbo].[ACTIVEMQ_ACKS] ADD  DEFAULT ((5)) FOR [PRIORITY]
    ;

    SET ANSI_NULLS ON
    ;

    SET QUOTED_IDENTIFIER ON
    ;

    SET ANSI_PADDING ON
    ;
    IF OBJECT_ID('dbo.ACTIVEMQ_LOCK','U') IS NOT NULL DROP TABLE [dbo].[ACTIVEMQ_LOCK];
    CREATE TABLE [dbo].[ACTIVEMQ_LOCK](
      [ID] [bigint] NOT NULL,
      [TIME] [bigint] NULL,
      [BROKER_NAME] [varchar](250) NULL,
    PRIMARY KEY CLUSTERED 
    (
      [ID] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]

    ;

    SET ANSI_PADDING OFF
    ;

    SET ANSI_NULLS ON
    ;

    SET QUOTED_IDENTIFIER ON
    ;

    SET ANSI_PADDING ON
    ;
    IF OBJECT_ID('dbo.ACTIVEMQ_MSGS','U') IS NOT NULL DROP TABLE [dbo].[ACTIVEMQ_MSGS];
    CREATE TABLE [dbo].[ACTIVEMQ_MSGS](
      [ID] [bigint] NOT NULL,
      [CONTAINER] [varchar](250) NOT NULL,
      [MSGID_PROD] [varchar](250) NULL,
      [MSGID_SEQ] [bigint] NULL,
      [EXPIRATION] [bigint] NULL,
      [MSG] [image] NULL,
      [PRIORITY] [bigint] NULL,
      [XID] [varchar](250) NULL,
    PRIMARY KEY CLUSTERED 
    (
      [ID] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

    ;

    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[allowedApprovers](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [approval] [int] NOT NULL,
      [approver] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[approvals]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[approvals](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [approved] [int] NULL,
      [approvedTS] [datetime2](7) NULL,
      [createTS] [datetime2](7) NULL,
      [label] [varchar](255) NULL,
      [reason] [varchar](255) NULL,
      [workflowObj] [text] NULL,
      [approver] [int] NULL,
      [workflow] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[approverAttributes]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[approverAttributes](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [name] [varchar](255) NOT NULL,
      [value] [varchar](255) NOT NULL,
      [approverId] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[approvers]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[approvers](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [userKey] [varchar](255) NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[auditLogs]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[auditLogs](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [attribute] [varchar](255) NULL,
      [isEntry] [int] NOT NULL,
      [val] [text] NULL,
      [approval] [int] NULL,
      [actionType] [int] NOT NULL,
      [target] [int] NULL,
      [userid] [int] NULL,
      [workflow] [int] NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[auditLogType]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[auditLogType](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [name] [varchar](255) NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[escalation]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[escalation](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [whenTS] [datetime2](7) NOT NULL,
      [approval] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[targets]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[targets](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [name] [varchar](255) NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[userAttributes]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[userAttributes](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [name] [varchar](255) NOT NULL,
      [value] [varchar](255) NOT NULL,
      [userid] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[users]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[users](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [userKey] [varchar](255) NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[workflowParameters]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[workflowParameters](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [name] [varchar](255) NOT NULL,
      [value] [varchar](255) NOT NULL,
      [workflow] [int] NOT NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;
    /****** Object:  Table [dbo].[workflows]    Script Date: 11/16/2021 2:22:18 PM ******/
    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[workflows](
      [id] [int] IDENTITY(1,1) NOT NULL,
      [completeTS] [datetime2](7) NULL,
      [description] [text] NULL,
      [label] [varchar](255) NULL,
      [name] [varchar](255) NOT NULL,
      [requestReason] [text] NULL,
      [startTS] [datetime2](7) NULL,
      [requesterid] [int] NULL,
      [userid] [int] NULL,
    PRIMARY KEY CLUSTERED 
    (
      [id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
    ;
    ALTER TABLE [dbo].[allowedApprovers]  WITH CHECK ADD  CONSTRAINT [FKel92fx0okym0rqt5bp0;8a9q] FOREIGN KEY([approval])
    REFERENCES [dbo].[approvals] ([id])
    ;
    ALTER TABLE [dbo].[allowedApprovers] CHECK CONSTRAINT [FKel92fx0okym0rqt5bp0;8a9q]
    ;
    ALTER TABLE [dbo].[allowedApprovers]  WITH CHECK ADD  CONSTRAINT [FKf2kv6sg17kgwlm999g7ovqpwy] FOREIGN KEY([approver])
    REFERENCES [dbo].[approvers] ([id])
    ;
    ALTER TABLE [dbo].[allowedApprovers] CHECK CONSTRAINT [FKf2kv6sg17kgwlm999g7ovqpwy]
    ;
    ALTER TABLE [dbo].[approvals]  WITH CHECK ADD  CONSTRAINT [FK5106341qr11yyqdn3xfj2qivj] FOREIGN KEY([workflow])
    REFERENCES [dbo].[workflows] ([id])
    ;
    ALTER TABLE [dbo].[approvals] CHECK CONSTRAINT [FK5106341qr11yyqdn3xfj2qivj]
    ;
    ALTER TABLE [dbo].[approvals]  WITH CHECK ADD  CONSTRAINT [FKf7pmu7cgxgts4o3l6sdueokk0] FOREIGN KEY([approver])
    REFERENCES [dbo].[approvers] ([id])
    ;
    ALTER TABLE [dbo].[approvals] CHECK CONSTRAINT [FKf7pmu7cgxgts4o3l6sdueokk0]
    ;
    ALTER TABLE [dbo].[approverAttributes]  WITH CHECK ADD  CONSTRAINT [FKfbjpbhv2aefrnyop0hwuhwsr3] FOREIGN KEY([approverId])
    REFERENCES [dbo].[approvers] ([id])
    ;
    ALTER TABLE [dbo].[approverAttributes] CHECK CONSTRAINT [FKfbjpbhv2aefrnyop0hwuhwsr3]
    ;
    ALTER TABLE [dbo].[auditLogs]  WITH CHECK ADD  CONSTRAINT [FK37bhgh2oy3evaey113n1tbyta] FOREIGN KEY([target])
    REFERENCES [dbo].[targets] ([id])
    ;
    ALTER TABLE [dbo].[auditLogs] CHECK CONSTRAINT [FK37bhgh2oy3evaey113n1tbyta]
    ;
    ALTER TABLE [dbo].[auditLogs]  WITH CHECK ADD  CONSTRAINT [FK7jtmxfrjhjeqsiwl4dki65lqc] FOREIGN KEY([actionType])
    REFERENCES [dbo].[auditLogType] ([id])
    ;
    ALTER TABLE [dbo].[auditLogs] CHECK CONSTRAINT [FK7jtmxfrjhjeqsiwl4dki65lqc]
    ;
    ALTER TABLE [dbo].[auditLogs]  WITH CHECK ADD  CONSTRAINT [FKdquv9n7oyd9e6ao2787je3d3h] FOREIGN KEY([userid])
    REFERENCES [dbo].[users] ([id])
    ;
    ALTER TABLE [dbo].[auditLogs] CHECK CONSTRAINT [FKdquv9n7oyd9e6ao2787je3d3h]
    ;
    ALTER TABLE [dbo].[auditLogs]  WITH CHECK ADD  CONSTRAINT [FKrmpsjnyik1rnwfyty62ca0eyi] FOREIGN KEY([workflow])
    REFERENCES [dbo].[workflows] ([id])
    ;
    ALTER TABLE [dbo].[auditLogs] CHECK CONSTRAINT [FKrmpsjnyik1rnwfyty62ca0eyi]
    ;
    ALTER TABLE [dbo].[escalation]  WITH CHECK ADD  CONSTRAINT [FKb9a2uveqras28iokbmflu0r6d] FOREIGN KEY([approval])
    REFERENCES [dbo].[approvals] ([id])
    ;
    ALTER TABLE [dbo].[escalation] CHECK CONSTRAINT [FKb9a2uveqras28iokbmflu0r6d]
    ;
    ALTER TABLE [dbo].[userAttributes]  WITH CHECK ADD  CONSTRAINT [FK1fdqahaxylln2kvdcirntdus7] FOREIGN KEY([userid])
    REFERENCES [dbo].[users] ([id])
    ;
    ALTER TABLE [dbo].[userAttributes] CHECK CONSTRAINT [FK1fdqahaxylln2kvdcirntdus7]
    ;
    ALTER TABLE [dbo].[workflowParameters]  WITH CHECK ADD  CONSTRAINT [FKda7i6c6sodieql6p668mp4fkq] FOREIGN KEY([workflow])
    REFERENCES [dbo].[workflows] ([id])
    ;
    ALTER TABLE [dbo].[workflowParameters] CHECK CONSTRAINT [FKda7i6c6sodieql6p668mp4fkq]
    ;
    ALTER TABLE [dbo].[workflows]  WITH CHECK ADD  CONSTRAINT [FKg659n86ll8m9ykbwrvkouwmns] FOREIGN KEY([userid])
    REFERENCES [dbo].[users] ([id])
    ;
    ALTER TABLE [dbo].[workflows] CHECK CONSTRAINT [FKg659n86ll8m9ykbwrvkouwmns]
    ;
    ALTER TABLE [dbo].[workflows]  WITH CHECK ADD  CONSTRAINT [FKgv0no93i61ejpr5ijl6oekhjq] FOREIGN KEY([requesterid])
    REFERENCES [dbo].[users] ([id])
    ;
    ALTER TABLE [dbo].[workflows] CHECK CONSTRAINT [FKgv0no93i61ejpr5ijl6oekhjq]
    ;

    CREATE TABLE [dbo].[localGroups](
      [groupId] [int] IDENTITY(1,1) NOT NULL,
      [description] [varchar](255) NULL,
      [name] [varchar](255) NOT NULL,
    CONSTRAINT [PK_localGroups] PRIMARY KEY CLUSTERED 
    (
      [groupId] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;

    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[localUsers](
      [userId] [int] IDENTITY(1,1) NOT NULL,
      [firstName] [varchar](255) NULL,
      [lastName] [varchar](255) NULL,
      [mail] [varchar](255) NULL,
      [sub] [varchar](255) NOT NULL,
    CONSTRAINT [PK_localUsers] PRIMARY KEY CLUSTERED 
    (
      [userId] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
    ;

    SET ANSI_NULLS ON
    ;
    SET QUOTED_IDENTIFIER ON
    ;
    CREATE TABLE [dbo].[userGroups](
      [groupId] [int] NOT NULL,
      [userId] [int] NOT NULL
    ) ON [PRIMARY]
    ;
    ALTER TABLE [dbo].[userGroups]  WITH CHECK ADD  CONSTRAINT [FK_userGroups_localGroups] FOREIGN KEY([groupId])
    REFERENCES [dbo].[localGroups] ([groupId])
    ;
    ALTER TABLE [dbo].[userGroups] CHECK CONSTRAINT [FK_userGroups_localGroups]
    ;
    ALTER TABLE [dbo].[userGroups]  WITH CHECK ADD  CONSTRAINT [FK_userGroups_localUsers] FOREIGN KEY([userId])
    REFERENCES [dbo].[localUsers] ([userId])
    ;
    ALTER TABLE [dbo].[userGroups] CHECK CONSTRAINT [FK_userGroups_localUsers]
    ;


    INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators with approval access for new projects and new cluster admins');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.external.suffix }}','System administrators with approval access for new projects and new cluster admins');
    {{ end }}

    INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.external.suffix }}','System administrators');
    {{ end }}

    INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}','Kubernetes cluster administrators');
    {{ if .Values.openunison.naas.groups.external.suffix }}
    INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}','Kubernetes cluster administrators');
    {{ end }}
    INSERT INTO localGroups (name,description) VALUES ('System','System level groups not assigned to local users');
    INSERT INTO localGroups (name,description) VALUES ('users','All users are members');

    INSERT INTO localUsers (mail,sub) VALUES ('','system');

    INSERT INTO userGroups (userId,groupId) VALUES (1,5);

    SET ANSI_PADDING OFF
    ;
{{ end }}
{{ if eq (substr 0 10 .Values.database.url)  "jdbc:mysql"}}
  sql_check_query: "show tables like 'QRTZ_TRIGGERS'"
  run_sql: |-
              CREATE TABLE `localUsers` (
                `userId` int(11) NOT NULL AUTO_INCREMENT,
                `firstName` varchar(255) DEFAULT NULL,
                `lastName` varchar(255) DEFAULT NULL,
                `mail` varchar(255) DEFAULT NULL,
                `sub` varchar(255) NOT NULL,
                PRIMARY KEY (`userId`)
              ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;


              # By: Ron Cordell - roncordell
              #  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.



              # make sure you have UTF-8 collaction for best .NET interoperability
              # CREATE DATABASE quartznet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

              DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
              DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
              DROP TABLE IF EXISTS QRTZ_LOCKS;
              DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
              DROP TABLE IF EXISTS QRTZ_CALENDARS;

              CREATE TABLE QRTZ_JOB_DETAILS(
              SCHED_NAME VARCHAR(120) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              JOB_CLASS_NAME VARCHAR(250) NOT NULL,
              IS_DURABLE BOOLEAN NOT NULL,
              IS_NONCONCURRENT BOOLEAN NOT NULL,
              IS_UPDATE_DATA BOOLEAN NOT NULL,
              REQUESTS_RECOVERY BOOLEAN NOT NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              NEXT_FIRE_TIME BIGINT(19) NULL,
              PREV_FIRE_TIME BIGINT(19) NULL,
              PRIORITY INTEGER NULL,
              TRIGGER_STATE VARCHAR(16) NOT NULL,
              TRIGGER_TYPE VARCHAR(8) NOT NULL,
              START_TIME BIGINT(19) NOT NULL,
              END_TIME BIGINT(19) NULL,
              CALENDAR_NAME VARCHAR(200) NULL,
              MISFIRE_INSTR SMALLINT(2) NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
              REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              REPEAT_COUNT BIGINT(7) NOT NULL,
              REPEAT_INTERVAL BIGINT(12) NOT NULL,
              TIMES_TRIGGERED BIGINT(10) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CRON_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              CRON_EXPRESSION VARCHAR(120) NOT NULL,
              TIME_ZONE_ID VARCHAR(80),
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPROP_TRIGGERS
                (          
                  SCHED_NAME VARCHAR(120) NOT NULL,
                  TRIGGER_NAME VARCHAR(200) NOT NULL,
                  TRIGGER_GROUP VARCHAR(200) NOT NULL,
                  STR_PROP_1 VARCHAR(512) NULL,
                  STR_PROP_2 VARCHAR(512) NULL,
                  STR_PROP_3 VARCHAR(512) NULL,
                  INT_PROP_1 INT NULL,
                  INT_PROP_2 INT NULL,
                  LONG_PROP_1 BIGINT NULL,
                  LONG_PROP_2 BIGINT NULL,
                  DEC_PROP_1 NUMERIC(13,4) NULL,
                  DEC_PROP_2 NUMERIC(13,4) NULL,
                  BOOL_PROP_1 BOOLEAN NULL,
                  BOOL_PROP_2 BOOLEAN NULL,
                  TIME_ZONE_ID VARCHAR(80) NULL,
                  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
                  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
                  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_BLOB_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              BLOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CALENDARS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              CALENDAR_NAME VARCHAR(200) NOT NULL,
              CALENDAR BLOB NOT NULL,
              PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_FIRED_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              ENTRY_ID VARCHAR(140) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              FIRED_TIME BIGINT(19) NOT NULL,
              SCHED_TIME BIGINT(19) NOT NULL,
              PRIORITY INTEGER NOT NULL,
              STATE VARCHAR(16) NOT NULL,
              JOB_NAME VARCHAR(200) NULL,
              JOB_GROUP VARCHAR(200) NULL,
              IS_NONCONCURRENT BOOLEAN NULL,
              REQUESTS_RECOVERY BOOLEAN NULL,
              PRIMARY KEY (SCHED_NAME,ENTRY_ID))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SCHEDULER_STATE (
              SCHED_NAME VARCHAR(120) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              LAST_CHECKIN_TIME BIGINT(19) NOT NULL,
              CHECKIN_INTERVAL BIGINT(19) NOT NULL,
              PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_LOCKS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              LOCK_NAME VARCHAR(40) NOT NULL,
              PRIMARY KEY (SCHED_NAME,LOCK_NAME))
              ENGINE=InnoDB;

              CREATE TABLE `localGroups` (
                `groupId` int(11) NOT NULL AUTO_INCREMENT,
                `description` text DEFAULT NULL,
                `name` varchar(255) NOT NULL,
                `extra1` text DEFAULT NULL,
                PRIMARY KEY (`groupId`)
              ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;

              CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

              CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
              CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

              CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
              CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

              DROP TABLE IF EXISTS ACTIVEMQ_ACKS;
              DROP TABLE IF EXISTS ACTIVEMQ_LOCK;
              DROP TABLE IF EXISTS ACTIVEMQ_MSGS;


              CREATE TABLE `ACTIVEMQ_ACKS` (
                `CONTAINER` varchar(250) NOT NULL,
                `SUB_DEST` varchar(250) DEFAULT NULL,
                `CLIENT_ID` varchar(250) NOT NULL,
                `SUB_NAME` varchar(250) NOT NULL,
                `SELECTOR` varchar(250) DEFAULT NULL,
                `LAST_ACKED_ID` bigint(20) DEFAULT NULL,
                `PRIORITY` bigint(20) NOT NULL DEFAULT '5',
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`CONTAINER`,`CLIENT_ID`,`SUB_NAME`,`PRIORITY`),
                KEY `ACTIVEMQ_ACKS_XIDX` (`XID`)
              );

              CREATE TABLE `ACTIVEMQ_LOCK` (
                `ID` bigint(20) NOT NULL,
                `TIME` bigint(20) DEFAULT NULL,
                `BROKER_NAME` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`)
              );

              CREATE TABLE `userGroups` (
                `groupId` int(11) NOT NULL,
                `userId` int(11) NOT NULL,
                KEY `FK6wef2figx9l7ncf7vc4umsdnu` (`userId`),
                KEY `FKmkxs7vbrm1unvaa0coapv38l8` (`groupId`),
                CONSTRAINT `FK6wef2figx9l7ncf7vc4umsdnu` FOREIGN KEY (`userId`) REFERENCES `localUsers` (`userId`),
                CONSTRAINT `FKmkxs7vbrm1unvaa0coapv38l8` FOREIGN KEY (`groupId`) REFERENCES `localGroups` (`groupId`)
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

              CREATE TABLE `ACTIVEMQ_MSGS` (
                `ID` bigint(20) NOT NULL,
                `CONTAINER` varchar(250) NOT NULL,
                `MSGID_PROD` varchar(250) DEFAULT NULL,
                `MSGID_SEQ` bigint(20) DEFAULT NULL,
                `EXPIRATION` bigint(20) DEFAULT NULL,
                `MSG` mediumblob,
                `PRIORITY` bigint(20) DEFAULT NULL,
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`),
                KEY `ACTIVEMQ_MSGS_MIDX` (`MSGID_PROD`,`MSGID_SEQ`),
                KEY `ACTIVEMQ_MSGS_CIDX` (`CONTAINER`),
                KEY `ACTIVEMQ_MSGS_EIDX` (`EXPIRATION`),
                KEY `ACTIVEMQ_MSGS_PIDX` (`PRIORITY`),
                KEY `ACTIVEMQ_MSGS_XIDX` (`XID`)
              );

              

              INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators with approval access for new projects and new cluster admins');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.external.suffix }}','System administrators with approval access for new projects and new cluster admins');
              {{ end }}

              INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.external.suffix }}','System administrators');
              {{ end }}

              INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}','Kubernetes cluster administrators');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}','Kubernetes cluster administrators');
              {{ end }}
              INSERT INTO localGroups (name,description) VALUES ('System','System level groups not assigned to local users');
              INSERT INTO localGroups (name,description) VALUES ('users','All users are members');

              INSERT INTO localUsers (mail,sub) VALUES ('','system');

              INSERT INTO userGroups (userId,groupId) VALUES (1,5);


              commit; 
{{ end }}
{{ if eq (substr 0 12 .Values.database.url)  "jdbc:mariadb"}}
  sql_check_query: "show tables like 'QRTZ_TRIGGERS'"
  run_sql: |-
              CREATE TABLE `localUsers` (
                `userId` int(11) NOT NULL AUTO_INCREMENT,
                `firstName` varchar(255) DEFAULT NULL,
                `lastName` varchar(255) DEFAULT NULL,
                `mail` varchar(255) DEFAULT NULL,
                `sub` varchar(255) NOT NULL,
                PRIMARY KEY (`userId`)
              ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;


              # By: Ron Cordell - roncordell
              #  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.



              # make sure you have UTF-8 collaction for best .NET interoperability
              # CREATE DATABASE quartznet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

              DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
              DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
              DROP TABLE IF EXISTS QRTZ_LOCKS;
              DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
              DROP TABLE IF EXISTS QRTZ_CALENDARS;

              CREATE TABLE QRTZ_JOB_DETAILS(
              SCHED_NAME VARCHAR(120) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              JOB_CLASS_NAME VARCHAR(250) NOT NULL,
              IS_DURABLE BOOLEAN NOT NULL,
              IS_NONCONCURRENT BOOLEAN NOT NULL,
              IS_UPDATE_DATA BOOLEAN NOT NULL,
              REQUESTS_RECOVERY BOOLEAN NOT NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              NEXT_FIRE_TIME BIGINT(19) NULL,
              PREV_FIRE_TIME BIGINT(19) NULL,
              PRIORITY INTEGER NULL,
              TRIGGER_STATE VARCHAR(16) NOT NULL,
              TRIGGER_TYPE VARCHAR(8) NOT NULL,
              START_TIME BIGINT(19) NOT NULL,
              END_TIME BIGINT(19) NULL,
              CALENDAR_NAME VARCHAR(200) NULL,
              MISFIRE_INSTR SMALLINT(2) NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
              REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              REPEAT_COUNT BIGINT(7) NOT NULL,
              REPEAT_INTERVAL BIGINT(12) NOT NULL,
              TIMES_TRIGGERED BIGINT(10) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CRON_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              CRON_EXPRESSION VARCHAR(120) NOT NULL,
              TIME_ZONE_ID VARCHAR(80),
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPROP_TRIGGERS
                (          
                  SCHED_NAME VARCHAR(120) NOT NULL,
                  TRIGGER_NAME VARCHAR(200) NOT NULL,
                  TRIGGER_GROUP VARCHAR(200) NOT NULL,
                  STR_PROP_1 VARCHAR(512) NULL,
                  STR_PROP_2 VARCHAR(512) NULL,
                  STR_PROP_3 VARCHAR(512) NULL,
                  INT_PROP_1 INT NULL,
                  INT_PROP_2 INT NULL,
                  LONG_PROP_1 BIGINT NULL,
                  LONG_PROP_2 BIGINT NULL,
                  DEC_PROP_1 NUMERIC(13,4) NULL,
                  DEC_PROP_2 NUMERIC(13,4) NULL,
                  BOOL_PROP_1 BOOLEAN NULL,
                  BOOL_PROP_2 BOOLEAN NULL,
                  TIME_ZONE_ID VARCHAR(80) NULL,
                  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
                  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
                  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_BLOB_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              BLOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CALENDARS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              CALENDAR_NAME VARCHAR(200) NOT NULL,
              CALENDAR BLOB NOT NULL,
              PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_FIRED_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              ENTRY_ID VARCHAR(140) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              FIRED_TIME BIGINT(19) NOT NULL,
              SCHED_TIME BIGINT(19) NOT NULL,
              PRIORITY INTEGER NOT NULL,
              STATE VARCHAR(16) NOT NULL,
              JOB_NAME VARCHAR(200) NULL,
              JOB_GROUP VARCHAR(200) NULL,
              IS_NONCONCURRENT BOOLEAN NULL,
              REQUESTS_RECOVERY BOOLEAN NULL,
              PRIMARY KEY (SCHED_NAME,ENTRY_ID))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SCHEDULER_STATE (
              SCHED_NAME VARCHAR(120) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              LAST_CHECKIN_TIME BIGINT(19) NOT NULL,
              CHECKIN_INTERVAL BIGINT(19) NOT NULL,
              PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_LOCKS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              LOCK_NAME VARCHAR(40) NOT NULL,
              PRIMARY KEY (SCHED_NAME,LOCK_NAME))
              ENGINE=InnoDB;

              CREATE TABLE `localGroups` (
                `groupId` int(11) NOT NULL AUTO_INCREMENT,
                `description` text DEFAULT NULL,
                `name` varchar(255) NOT NULL,
                `extra1` text DEFAULT NULL,
                PRIMARY KEY (`groupId`)
              ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;

              CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

              CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
              CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

              CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
              CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

              DROP TABLE IF EXISTS ACTIVEMQ_ACKS;
              DROP TABLE IF EXISTS ACTIVEMQ_LOCK;
              DROP TABLE IF EXISTS ACTIVEMQ_MSGS;


              CREATE TABLE `ACTIVEMQ_ACKS` (
                `CONTAINER` varchar(250) NOT NULL,
                `SUB_DEST` varchar(250) DEFAULT NULL,
                `CLIENT_ID` varchar(250) NOT NULL,
                `SUB_NAME` varchar(250) NOT NULL,
                `SELECTOR` varchar(250) DEFAULT NULL,
                `LAST_ACKED_ID` bigint(20) DEFAULT NULL,
                `PRIORITY` bigint(20) NOT NULL DEFAULT '5',
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`CONTAINER`,`CLIENT_ID`,`SUB_NAME`,`PRIORITY`),
                KEY `ACTIVEMQ_ACKS_XIDX` (`XID`)
              );

              CREATE TABLE `ACTIVEMQ_LOCK` (
                `ID` bigint(20) NOT NULL,
                `TIME` bigint(20) DEFAULT NULL,
                `BROKER_NAME` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`)
              );

              CREATE TABLE `userGroups` (
                `groupId` int(11) NOT NULL,
                `userId` int(11) NOT NULL,
                KEY `FK6wef2figx9l7ncf7vc4umsdnu` (`userId`),
                KEY `FKmkxs7vbrm1unvaa0coapv38l8` (`groupId`),
                CONSTRAINT `FK6wef2figx9l7ncf7vc4umsdnu` FOREIGN KEY (`userId`) REFERENCES `localUsers` (`userId`),
                CONSTRAINT `FKmkxs7vbrm1unvaa0coapv38l8` FOREIGN KEY (`groupId`) REFERENCES `localGroups` (`groupId`)
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

              CREATE TABLE `ACTIVEMQ_MSGS` (
                `ID` bigint(20) NOT NULL,
                `CONTAINER` varchar(250) NOT NULL,
                `MSGID_PROD` varchar(250) DEFAULT NULL,
                `MSGID_SEQ` bigint(20) DEFAULT NULL,
                `EXPIRATION` bigint(20) DEFAULT NULL,
                `MSG` mediumblob,
                `PRIORITY` bigint(20) DEFAULT NULL,
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`),
                KEY `ACTIVEMQ_MSGS_MIDX` (`MSGID_PROD`,`MSGID_SEQ`),
                KEY `ACTIVEMQ_MSGS_CIDX` (`CONTAINER`),
                KEY `ACTIVEMQ_MSGS_EIDX` (`EXPIRATION`),
                KEY `ACTIVEMQ_MSGS_PIDX` (`PRIORITY`),
                KEY `ACTIVEMQ_MSGS_XIDX` (`XID`)
              );

              

              INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators with approval access for new projects and new cluster admins');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('administrators{{ .Values.openunison.naas.groups.external.suffix }}','System administrators with approval access for new projects and new cluster admins');
              {{ end }}

              INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.internal.suffix }}','System administrators');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('operations{{ .Values.openunison.naas.groups.external.suffix }}','System administrators');
              {{ end }}

              INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.internal.suffix }}','Kubernetes cluster administrators');
              {{ if .Values.openunison.naas.groups.external.suffix }}
              INSERT INTO localGroups (name,description) VALUES ('k8s-cluster-k8s-administrators{{ .Values.openunison.naas.groups.external.suffix }}','Kubernetes cluster administrators');
              {{ end }}
              INSERT INTO localGroups (name,description) VALUES ('System','System level groups not assigned to local users');
              INSERT INTO localGroups (name,description) VALUES ('users','All users are members');

              INSERT INTO localUsers (mail,sub) VALUES ('','system');

              INSERT INTO userGroups (userId,groupId) VALUES (1,5);


              commit; 
{{ end }}
{{ end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-config
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "20"
data:
  oidc-api-server-flags: |-
                           --oidc-issuer-url=https://{{ .Values.network.openunison_host }}/auth/idp/k8sIdp
                           --oidc-client-id=kubernetes
                           --oidc-username-claim=sub
                           --oidc-groups-claim=groups
                           --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem
