{{ if or (and .Values.openunison.enable_provisioning .Values.openunison.amq.enabled) (and .Values.openunison.enable_provisioning .Values.openunison.enable_activemq ) }}
{{ if or .Values.openunison.amq.pvc.enabled .Values.openunison.activemq_use_pvc }}
{{- $root := . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: activemq-config-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "20"
data:
  activemq.xml: |-
        <!--
        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        -->
        <!-- START SNIPPET: example -->
        <beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">




            <!-- Allows us to use system properties as variables in this configuration file -->
            <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                <property name="locations">
                    <value>file:${activemq.conf}/credentials.properties</value>
                </property>
            </bean>



        <!-- Allows accessing the server log -->
            <!-- <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery"
                lazy-init="false" scope="singleton"
                init-method="start" destroy-method="stop">
            </bean> -->

            <!--
                The <broker> element is used to configure the ActiveMQ broker.
            -->
            <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">
                {{ if .Values.openunison.amq.use_token }}
                <plugins>
                    <simpleAuthenticationPlugin anonymousAccessAllowed="false">
                        <users>
                            <authenticationUser username="openunison" password="${AMQ_TOKEN}" groups="users,admins"/>
                            <authenticationUser username="system" password="${AMQ_TOKEN}" groups="users,admins"/>
                            
                        </users>
                    </simpleAuthenticationPlugin>
                </plugins>
                {{ end }}
                <destinationPolicy>
                    <policyMap>
                    <policyEntries>
                        <policyEntry topic=">" >
                            <!-- The constantPendingMessageLimitStrategy is used to prevent
                                slow topic consumers to block producers and affect other consumers
                                by limiting the number of messages that are retained
                                For more information, see:

                                http://activemq.apache.org/slow-consumer-handling.html

                            -->
                        <pendingMessageLimitStrategy>
                            <constantPendingMessageLimitStrategy limit="1000"/>
                        </pendingMessageLimitStrategy>
                        </policyEntry>
                    </policyEntries>
                    </policyMap>
                </destinationPolicy>


                <!--
                    The managementContext is used to configure how ActiveMQ is exposed in
                    JMX. By default, ActiveMQ uses the MBean server that is started by
                    the JVM. For more information, see:

                    http://activemq.apache.org/jmx.html
                -->
                <managementContext>
                    <managementContext createConnector="false"/>
                </managementContext>

                <!--
                    Configure message persistence for the broker. The default persistence
                    mechanism is the KahaDB store (identified by the kahaDB tag).
                    For more information, see:

                    http://activemq.apache.org/persistence.html
                -->
                <persistenceAdapter>
                    <kahaDB directory="/activemq-data" />
                </persistenceAdapter>




                <!--
                    The systemUsage controls the maximum amount of space the broker will
                    use before disabling caching and/or slowing down producers. For more information, see:
                    http://activemq.apache.org/producer-flow-control.html
                -->
                <systemUsage>
                    <systemUsage>
                        <memoryUsage>
                            <memoryUsage percentOfJvmHeap="70" />
                        </memoryUsage>
                        <storeUsage>
                            {{ if .Values.openunison.activemq_pvc_size }}
                            <storeUsage limit="{{ .Values.openunison.activemq_pvc_size }}"/>
                            {{ else }}
                            <storeUsage limit="{{ .Values.openunison.amq.pvc.size | default "1G" }}"/>
                            {{ end }}
                        </storeUsage>
                        <tempUsage>
                            {{ if .Values.openunison.activemq_pvc_size }}
                            <tempUsage limit="{{ .Values.openunison.activemq_pvc_size }}"/>
                            {{ else }}
                            <tempUsage limit="{{ .Values.openunison.amq.pvc.size | default "1G" }}"/>
                            {{ end }}
                        </tempUsage>
                    </systemUsage>
                </systemUsage>

                <!--
                    The transport connectors expose ActiveMQ over a given protocol to
                    clients and other brokers. For more information, see:

                    http://activemq.apache.org/configuring-transports.html
                -->
                <sslContext>
                    <sslContext
                            keyStore="/etc/activemq-secrets/amq.p12" keyStorePassword="${TLS_KS_PWD}"
                            trustStore="/etc/activemq-secrets/amq.p12" trustStorePassword="${TLS_KS_PWD}" trustStoreType="pkcs12" keyStoreType="pkcs12"/>
                    </sslContext>
                <transportConnectors>
                    <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
                    {{ if .Values.openunison.amq.use_token }}
                    <transportConnector name="openwire" uri="ssl://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                    {{ else }}
                    <transportConnector name="openwire" uri="ssl://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;needClientAuth=true"/>
                    {{ end }}
                    
                </transportConnectors>

                <!-- destroy the spring context on shutdown to stop jetty -->
                <shutdownHooks>
                    <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
                </shutdownHooks>

                <networkConnectors>
{{ if .Values.openunison.amq.remote_brokers }}

{{ $remote_queue_num := 0 }}
{{ $remote_queues := splitList "," .Values.openunison.non_secret_data.K8S_DR_QUEUES }}
{{ $remote_extra_queues := splitList "," .Values.openunison.non_secret_data.K8S_REMOTE_QUEUES }}

{{ range $host := .Values.openunison.amq.remote_brokers}}
                    <networkConnector {{ if $root.Values.openunison.amq.use_token}}userName="openunison" password="${AMQ_TOKEN}"{{ end }}  name="{{ $host }}"  uri="static:(ssl://{{ $host }})" >
                        <dynamicallyIncludedDestinations>
                            {{ range $remote_queue_name := $remote_queues }}
                            <queue physicalName="{{ $remote_queue_name }}" />
                            {{ end }}

                            {{ range $remote_queue_name := $remote_extra_queues }}
                            <queue physicalName="{{ $remote_queue_name }}" />
                            {{ end }}
                        </dynamicallyIncludedDestinations>
                        <excludedDestinations>
                            <queue physicalName="ActiveMQ.DLQ" />
                        </excludedDestinations>
                    </networkConnector>
{{ end }}




{{ end }}
                </networkConnectors>

            </broker>

            <!--
                Enable web consoles, REST and Ajax APIs and demos
                The web consoles requires by default login, you can disable this in the jetty.xml file

                Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
            -->
            <!-- <import resource="file:///usr/local/activemq/conf/jetty.xml"/> -->
            <bean id="securityLoginService" class="org.eclipse.jetty.security.HashLoginService">
                <property name="name" value="ActiveMQRealm" />
                <property name="config" value="${activemq.conf}/jetty-realm.properties" />
            </bean>

            <bean id="securityConstraint" class="org.eclipse.jetty.util.security.Constraint">
                <property name="name" value="BASIC" />
                <property name="roles" value="user,admin" />
                <!-- set authenticate=false to disable login -->
                <property name="authenticate" value="false" />
            </bean>
            <bean id="adminSecurityConstraint" class="org.eclipse.jetty.util.security.Constraint">
                <property name="name" value="BASIC" />
                <property name="roles" value="admin" />
                <!-- set authenticate=false to disable login -->
                <property name="authenticate" value="false" />
            </bean>
            <bean id="securityConstraintMapping" class="org.eclipse.jetty.security.ConstraintMapping">
                <property name="constraint" ref="securityConstraint" />
                <property name="pathSpec" value="/api/*,/admin/*,*.jsp" />
            </bean>
            <bean id="adminSecurityConstraintMapping" class="org.eclipse.jetty.security.ConstraintMapping">
                <property name="constraint" ref="adminSecurityConstraint" />
                <property name="pathSpec" value="*.action" />
            </bean>

            <bean id="rewriteHandler" class="org.eclipse.jetty.rewrite.handler.RewriteHandler">
                <property name="rules">
                    <list>
                        <bean id="header" class="org.eclipse.jetty.rewrite.handler.HeaderPatternRule">
                        <property name="pattern" value="*"/>
                        <property name="name" value="X-FRAME-OPTIONS"/>
                        <property name="value" value="SAMEORIGIN"/>
                        </bean>
                    </list>
                </property>
            </bean>

            <bean id="secHandlerCollection" class="org.eclipse.jetty.server.handler.HandlerCollection">
                <property name="handlers">
                    <list>
                        <ref bean="rewriteHandler"/>
                        <bean class="org.eclipse.jetty.webapp.WebAppContext">
                            <property name="contextPath" value="/admin" />
                            <property name="resourceBase" value="${activemq.home}/webapps/admin" />
                            <property name="logUrlOnStart" value="true" />
                        </bean>
                        <bean class="org.eclipse.jetty.webapp.WebAppContext">
                            <property name="contextPath" value="/api" />
                            <property name="resourceBase" value="${activemq.home}/webapps/api" />
                            <property name="logUrlOnStart" value="true" />
                        </bean>
                        <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                            <property name="directoriesListed" value="false" />
                            <property name="welcomeFiles">
                                <list>
                                    <value>index.html</value>
                                </list>
                            </property>
                            <property name="resourceBase" value="${activemq.home}/webapps/" />
                        </bean>
                        <bean id="defaultHandler" class="org.eclipse.jetty.server.handler.DefaultHandler">
                            <property name="serveIcon" value="false" />
                        </bean>
                    </list>
                </property>
            </bean>
            <bean id="securityHandler" class="org.eclipse.jetty.security.ConstraintSecurityHandler">
                <property name="loginService" ref="securityLoginService" />
                <property name="authenticator">
                    <bean class="org.eclipse.jetty.security.authentication.BasicAuthenticator" />
                </property>
                <property name="constraintMappings">
                    <list>
                        <ref bean="adminSecurityConstraintMapping" />
                        <ref bean="securityConstraintMapping" />
                    </list>
                </property>
                <property name="handler" ref="secHandlerCollection" />
            </bean>

            <bean id="contexts" class="org.eclipse.jetty.server.handler.ContextHandlerCollection">
            </bean>

        <!--  <bean id="jettyPort" class="org.apache.activemq.web.WebConsolePort" init-method="start">

                <property name="host" value="0.0.0.0"/>
                <property name="port" value="8161"/>
            </bean -->

            <bean id="Server" class="org.eclipse.jetty.server.Server"
                destroy-method="stop">

                <property name="handler">
                    <bean id="handlers" class="org.eclipse.jetty.server.handler.HandlerCollection">
                        <property name="handlers">
                            <list>
                                <ref bean="contexts" />
                                <ref bean="securityHandler" />
                            </list>
                        </property>
                    </bean>
                </property>

            </bean>



            <bean id="invokeConnectors" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetObject" ref="Server" />
                <property name="targetMethod" value="setConnectors" />
                <property name="arguments">
                <list>
                    <bean id="Connector" class="org.eclipse.jetty.server.ServerConnector">
                        <constructor-arg ref="Server" />
                            <!-- see the jettyPort bean -->
                        <property name="host" value="127.0.0.1" />
                        <property name="port" value="8161" />
                    </bean>
                        <!--
                            Enable this connector if you wish to use https with web console
                        -->
                        
                        <bean id="SecureConnector" class="org.eclipse.jetty.server.ServerConnector">
                            <constructor-arg ref="Server" />
                            <constructor-arg>
                                <bean id="handlers" class="org.eclipse.jetty.util.ssl.SslContextFactory$Server">

                                    <property name="keyStorePath" value="/etc/activemq-secrets/amq.p12" />
                                    <property name="keyStorePassword" value="${TLS_KS_PWD}" />
                                    <property name="keyStoreType" value="pkcs12" />

                                    <property name="trustStorePath" value="/etc/activemq-secrets/amq.p12" />
                                    <property name="trustStorePassword" value="${TLS_KS_PWD}" />
                                    <property name="trustStoreType" value="pkcs12" />
                                    <property name="needClientAuth" value="true" />
                                    <property name="endpointIdentificationAlgorithm">
                                        <null></null>
                                    </property>
                                </bean>
                            </constructor-arg>
                            <property name="port" value="8162" />
                        </bean>
                    </list>
                </property>
            </bean>

            <bean id="configureJetty" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="staticMethod" value="org.apache.activemq.web.config.JspConfigurer.configureJetty" />
                <property name="arguments">
                    <list>
                        <ref bean="Server" />
                        <ref bean="secHandlerCollection" />
                    </list>
                </property>
            </bean>

            <bean id="invokeStart" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
                depends-on="configureJetty, invokeConnectors">
                <property name="targetObject" ref="Server" />
                <property name="targetMethod" value="start" />
            </bean>

        </beans>
        <!-- END SNIPPET: example -->
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: activemq-kahadb
  namespace: {{ .Release.Namespace }}
spec:
  {{ if .Values.openunison.activemq_storageclass }}
  storageClassName: {{ .Values.openunison.activemq_storageclass }}
  {{ else if .Values.openunison.amq.pvc.storageclass }}
  storageClassName: {{ .Values.openunison.amq.pvc.storageclass }}
  {{ end }}
  accessModes:
    - {{ .Values.openunison.amq.pvc.accessmode | default "ReadWriteOnce" }}
  resources:
    requests:
      {{ if .Values.openunison.activemq_pvc_size }}
      storage: {{ .Values.openunison.activemq_pvc_size }}
      {{ else }}
      storage: {{ .Values.openunison.amq.pvc.size | default "1G" }}
      {{ end }}
{{ end }}
{{ end }}